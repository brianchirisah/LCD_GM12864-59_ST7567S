
GM1286459N_LCD_Driver_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08003248  08003248  00004248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003894  08003894  00005020  2**0
                  CONTENTS
  4 .ARM          00000008  08003894  08003894  00004894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800389c  0800389c  00005020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800389c  0800389c  0000489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038a0  080038a0  000048a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080038a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000020  080038c4  00005020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080038c4  00005098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064e8  00000000  00000000  00005049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001513  00000000  00000000  0000b531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0000ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000566  00000000  00000000  0000d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016db2  00000000  00000000  0000d6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b28  00000000  00000000  00024470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008280b  00000000  00000000  0002df98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b07a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e20  00000000  00000000  000b07e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000b2608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08003230 	.word	0x08003230

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08003230 	.word	0x08003230

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2120      	movs	r1, #32
 8000a94:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000a96:	f001 f9d9 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000ab2:	f001 f847 	bl	8001b44 <HAL_GPIO_Init>

}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ace:	4a13      	ldr	r2, [pc, #76]	@ (8000b1c <MX_I2C1_Init+0x54>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_I2C1_Init+0x58>)
 8000ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ae6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000b06:	f001 f9d3 	bl	8001eb0 <HAL_I2C_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f000 fe1d 	bl	800174e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000003c 	.word	0x2000003c
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb4 <HAL_I2C_MspInit+0x90>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d132      	bne.n	8000baa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b62:	2312      	movs	r3, #18
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <HAL_I2C_MspInit+0x98>)
 8000b72:	f000 ffe7 	bl	8001b44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_I2C_MspInit+0x9c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc0 <HAL_I2C_MspInit+0x9c>)
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010c00 	.word	0x40010c00
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <vert_lines>:
		Page_addr[1]++;
		start_page++;
	}
}

void vert_lines (double height, double x_coordinate, double y_coordinate){
 8000bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc8:	b08f      	sub	sp, #60	@ 0x3c
 8000bca:	af02      	add	r7, sp, #8
 8000bcc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000bd0:	e9c7 2300 	strd	r2, r3, [r7]
 8000bd4:	466b      	mov	r3, sp
 8000bd6:	461e      	mov	r6, r3

	uint8_t i=0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t pixel_draw[2] = {0x40, 0xFF};//pixel_draw_val};
 8000bde:	f64f 7340 	movw	r3, #65344	@ 0xff40
 8000be2:	82bb      	strh	r3, [r7, #20]
	uint8_t bit_pattern = 0b11111111;
 8000be4:	23ff      	movs	r3, #255	@ 0xff
 8000be6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t bit_pattern_array[(uint8_t)(ceil(height/8))];
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	4bad      	ldr	r3, [pc, #692]	@ (8000ea4 <vert_lines+0x2e0>)
 8000bf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bf4:	f7ff fd9a 	bl	800072c <__aeabi_ddiv>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f002 fa1a 	bl	8003038 <ceil>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fefe 	bl	8000a0c <__aeabi_d2uiz>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b2d9      	uxtb	r1, r3
 8000c14:	460b      	mov	r3, r1
 8000c16:	3b01      	subs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c1a:	b2cb      	uxtb	r3, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4698      	mov	r8, r3
 8000c20:	4691      	mov	r9, r2
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c36:	b2cb      	uxtb	r3, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	461c      	mov	r4, r3
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	00eb      	lsls	r3, r5, #3
 8000c48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c4c:	00e2      	lsls	r2, r4, #3
 8000c4e:	460b      	mov	r3, r1
 8000c50:	3307      	adds	r3, #7
 8000c52:	08db      	lsrs	r3, r3, #3
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	ebad 0d03 	sub.w	sp, sp, r3
 8000c5a:	ab02      	add	r3, sp, #8
 8000c5c:	3300      	adds	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
	// Extracting 4 MSBs then bitwise OR with '0b0001 0000'
	Col_addr_MSB[1]= (((uint8_t)x_coordinate) >> 4) | 0x10;
 8000c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c64:	f7ff fed2 	bl	8000a0c <__aeabi_d2uiz>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	091b      	lsrs	r3, r3, #4
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b8c      	ldr	r3, [pc, #560]	@ (8000ea8 <vert_lines+0x2e4>)
 8000c78:	705a      	strb	r2, [r3, #1]
	// Extracting 4 LSBs by bitwise ANDing with '0b0000 1111'
	Col_addr_LSB[1] = ((uint8_t)x_coordinate) & 0x0F;
 8000c7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c7e:	f7ff fec5 	bl	8000a0c <__aeabi_d2uiz>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b87      	ldr	r3, [pc, #540]	@ (8000eac <vert_lines+0x2e8>)
 8000c8e:	705a      	strb	r2, [r3, #1]

	while (height >= 8){
 8000c90:	e095      	b.n	8000dbe <vert_lines+0x1fa>
		Page_addr[1] = (0xB0 + ( floor( y_coordinate / 8 )));
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	4b83      	ldr	r3, [pc, #524]	@ (8000ea4 <vert_lines+0x2e0>)
 8000c98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000c9c:	f7ff fd46 	bl	800072c <__aeabi_ddiv>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f002 fa42 	bl	8003130 <floor>
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	4b7f      	ldr	r3, [pc, #508]	@ (8000eb0 <vert_lines+0x2ec>)
 8000cb2:	f7ff fa5b 	bl	800016c <__adddf3>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4610      	mov	r0, r2
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f7ff fea5 	bl	8000a0c <__aeabi_d2uiz>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b7b      	ldr	r3, [pc, #492]	@ (8000eb4 <vert_lines+0x2f0>)
 8000cc8:	705a      	strb	r2, [r3, #1]
		double_t pixels=0;
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pixels = ((i+1)*8)-(pixels + y_coordinate);
 8000cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cda:	3301      	adds	r3, #1
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fb90 	bl	8000404 <__aeabi_i2d>
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cf0:	f7ff fa3c 	bl	800016c <__adddf3>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	f7ff fa34 	bl	8000168 <__aeabi_dsub>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pixel_draw[1]= bit_pattern & 0b11111111 << (8-(uint8_t)pixels);
 8000d08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d0c:	f7ff fe7e 	bl	8000a0c <__aeabi_d2uiz>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f1c3 0308 	rsb	r3, r3, #8
 8000d18:	22ff      	movs	r2, #255	@ 0xff
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	b25a      	sxtb	r2, r3
 8000d20:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000d24:	4013      	ands	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, 2, Timeout); // Set Column Most significant Byte Address
 8000d2c:	233f      	movs	r3, #63	@ 0x3f
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	b299      	uxth	r1, r3
 8000d32:	4b61      	ldr	r3, [pc, #388]	@ (8000eb8 <vert_lines+0x2f4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2302      	movs	r3, #2
 8000d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8000ea8 <vert_lines+0x2e4>)
 8000d3c:	485f      	ldr	r0, [pc, #380]	@ (8000ebc <vert_lines+0x2f8>)
 8000d3e:	f001 f9fb 	bl	8002138 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, 2, Timeout); // Set Column Least significant Byte Address
 8000d42:	233f      	movs	r3, #63	@ 0x3f
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	b299      	uxth	r1, r3
 8000d48:	4b5b      	ldr	r3, [pc, #364]	@ (8000eb8 <vert_lines+0x2f4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2302      	movs	r3, #2
 8000d50:	4a56      	ldr	r2, [pc, #344]	@ (8000eac <vert_lines+0x2e8>)
 8000d52:	485a      	ldr	r0, [pc, #360]	@ (8000ebc <vert_lines+0x2f8>)
 8000d54:	f001 f9f0 	bl	8002138 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Page_addr, 2, Timeout); // Set Page Address (Row Address)
 8000d58:	233f      	movs	r3, #63	@ 0x3f
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	b299      	uxth	r1, r3
 8000d5e:	4b56      	ldr	r3, [pc, #344]	@ (8000eb8 <vert_lines+0x2f4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2302      	movs	r3, #2
 8000d66:	4a53      	ldr	r2, [pc, #332]	@ (8000eb4 <vert_lines+0x2f0>)
 8000d68:	4854      	ldr	r0, [pc, #336]	@ (8000ebc <vert_lines+0x2f8>)
 8000d6a:	f001 f9e5 	bl	8002138 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), pixel_draw, 2, Timeout);
 8000d6e:	233f      	movs	r3, #63	@ 0x3f
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	b299      	uxth	r1, r3
 8000d74:	4b50      	ldr	r3, [pc, #320]	@ (8000eb8 <vert_lines+0x2f4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f107 0214 	add.w	r2, r7, #20
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2302      	movs	r3, #2
 8000d80:	484e      	ldr	r0, [pc, #312]	@ (8000ebc <vert_lines+0x2f8>)
 8000d82:	f001 f9d9 	bl	8002138 <HAL_I2C_Master_Transmit>
		y_coordinate= y_coordinate + pixels;
 8000d86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000d8e:	f7ff f9ed 	bl	800016c <__adddf3>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		height = height - pixels;
 8000d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000da2:	f7ff f9e1 	bl	8000168 <__aeabi_dsub>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		i++;
 8000dae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000db2:	3301      	adds	r3, #1
 8000db4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		HAL_Delay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 fdbb 	bl	8001934 <HAL_Delay>
	while (height >= 8){
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	4b38      	ldr	r3, [pc, #224]	@ (8000ea4 <vert_lines+0x2e0>)
 8000dc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dc8:	f7ff fe0c 	bl	80009e4 <__aeabi_dcmpge>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f47f af5f 	bne.w	8000c92 <vert_lines+0xce>
	}
	//for (i=i; i>0; i--){
	bit_pattern = bit_pattern & 0b11111111 << ((uint8_t)y_coordinate%8);
 8000dd4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000dd8:	f7ff fe18 	bl	8000a0c <__aeabi_d2uiz>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	22ff      	movs	r2, #255	@ 0xff
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000df0:	4013      	ands	r3, r2
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	bit_pattern = bit_pattern & 0b11111111 >> (8-((uint8_t)height + (uint8_t)y_coordinate%8));
 8000df8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dfc:	f7ff fe06 	bl	8000a0c <__aeabi_d2uiz>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	461c      	mov	r4, r3
 8000e06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000e0a:	f7ff fdff 	bl	8000a0c <__aeabi_d2uiz>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	4423      	add	r3, r4
 8000e18:	f1c3 0308 	rsb	r3, r3, #8
 8000e1c:	22ff      	movs	r2, #255	@ 0xff
 8000e1e:	fa42 f303 	asr.w	r3, r2, r3
 8000e22:	b25a      	sxtb	r2, r3
 8000e24:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	pixel_draw[1] =bit_pattern;
 8000e30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e34:	757b      	strb	r3, [r7, #21]
	//}
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, 2, Timeout); // Set Column Most significant Byte Address
 8000e36:	233f      	movs	r3, #63	@ 0x3f
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <vert_lines+0x2f4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2302      	movs	r3, #2
 8000e44:	4a18      	ldr	r2, [pc, #96]	@ (8000ea8 <vert_lines+0x2e4>)
 8000e46:	481d      	ldr	r0, [pc, #116]	@ (8000ebc <vert_lines+0x2f8>)
 8000e48:	f001 f976 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, 2, Timeout); // Set Column Least significant Byte Address
 8000e4c:	233f      	movs	r3, #63	@ 0x3f
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	b299      	uxth	r1, r3
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <vert_lines+0x2f4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2302      	movs	r3, #2
 8000e5a:	4a14      	ldr	r2, [pc, #80]	@ (8000eac <vert_lines+0x2e8>)
 8000e5c:	4817      	ldr	r0, [pc, #92]	@ (8000ebc <vert_lines+0x2f8>)
 8000e5e:	f001 f96b 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Page_addr, 2, Timeout); // Set Page Address (Row Address)
 8000e62:	233f      	movs	r3, #63	@ 0x3f
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	b299      	uxth	r1, r3
 8000e68:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <vert_lines+0x2f4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2302      	movs	r3, #2
 8000e70:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <vert_lines+0x2f0>)
 8000e72:	4812      	ldr	r0, [pc, #72]	@ (8000ebc <vert_lines+0x2f8>)
 8000e74:	f001 f960 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), pixel_draw, 2, Timeout);
 8000e78:	233f      	movs	r3, #63	@ 0x3f
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	b299      	uxth	r1, r3
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <vert_lines+0x2f4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f107 0214 	add.w	r2, r7, #20
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2302      	movs	r3, #2
 8000e8a:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <vert_lines+0x2f8>)
 8000e8c:	f001 f954 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 fd4f 	bl	8001934 <HAL_Delay>
 8000e96:	46b5      	mov	sp, r6

}
 8000e98:	bf00      	nop
 8000e9a:	3734      	adds	r7, #52	@ 0x34
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40200000 	.word	0x40200000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000090 	.word	0x20000090
 8000eb0:	40660000 	.word	0x40660000
 8000eb4:	20000004 	.word	0x20000004
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	2000003c 	.word	0x2000003c

08000ec0 <multi_line_text>:
 * @param  The text to write to the LCD surrounded by ""
 * @param  Font position in the array (0-indexed)
 * @param  Text inversion (1 = on , 0 = Off)
 */

void multi_line_text(double start_page, const char string_in[], uint8_t font_name, uint8_t inversion) {
 8000ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ec4:	b095      	sub	sp, #84	@ 0x54
 8000ec6:	af02      	add	r7, sp, #8
 8000ec8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	70fb      	strb	r3, [r7, #3]
 8000ed0:	466b      	mov	r3, sp
 8000ed2:	461e      	mov	r6, r3
	double max_char_per_row;
	double pages_needed;
	const uint8_t LCD_pixels_width = 132;
 8000ed4:	2384      	movs	r3, #132	@ 0x84
 8000ed6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	const double LCD_pages = 8;
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	4ba9      	ldr	r3, [pc, #676]	@ (8001184 <multi_line_text+0x2c4>)
 8000ee0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	uint8_t char_width = font_properties[font_name][0];
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	4aa8      	ldr	r2, [pc, #672]	@ (8001188 <multi_line_text+0x2c8>)
 8000ee8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000eec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t font_offset= font_properties[font_name][1];
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	4aa5      	ldr	r2, [pc, #660]	@ (8001188 <multi_line_text+0x2c8>)
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t input_pos = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t char_hex_array[char_width + 1];
 8000f04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f08:	1c59      	adds	r1, r3, #1
 8000f0a:	1e4b      	subs	r3, r1, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f0e:	460a      	mov	r2, r1
 8000f10:	2300      	movs	r3, #0
 8000f12:	4690      	mov	r8, r2
 8000f14:	4699      	mov	r9, r3
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f2a:	460a      	mov	r2, r1
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	4614      	mov	r4, r2
 8000f30:	461d      	mov	r5, r3
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	00eb      	lsls	r3, r5, #3
 8000f3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f40:	00e2      	lsls	r2, r4, #3
 8000f42:	460b      	mov	r3, r1
 8000f44:	3307      	adds	r3, #7
 8000f46:	08db      	lsrs	r3, r3, #3
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f4e:	ab02      	add	r3, sp, #8
 8000f50:	3300      	adds	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t input_char;
	uint8_t pages_avail;
	uint8_t max_input_len;
	uint8_t Send_size;
	uint8_t page_counter=1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t input_len = strlen(string_in);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff f8f8 	bl	8000150 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint16_t hex_font_pos;
	// calculate how many characters will fit on a single row (max_char_per_row)
	max_char_per_row = 132 / char_width;
 8000f66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f6a:	2284      	movs	r2, #132	@ 0x84
 8000f6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fa47 	bl	8000404 <__aeabi_i2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	// calculate how many characters will fit on the screen (max_input_len)
	max_input_len = (9 - start_page) * max_char_per_row;
 8000f7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	4981      	ldr	r1, [pc, #516]	@ (800118c <multi_line_text+0x2cc>)
 8000f88:	f7ff f8ee 	bl	8000168 <__aeabi_dsub>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000f98:	f7ff fa9e 	bl	80004d8 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fd32 	bl	8000a0c <__aeabi_d2uiz>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	//max usable pages calculation
	Send_size = (char_width + 1);
 8000fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	char_hex_array[0] = data_prefix;
 8000fb8:	4b75      	ldr	r3, [pc, #468]	@ (8001190 <multi_line_text+0x2d0>)
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbe:	701a      	strb	r2, [r3, #0]
	if (input_len <= max_input_len) { // if input_len <= max_input_len : execute code, else print error text
 8000fc0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f200 8162 	bhi.w	8001292 <multi_line_text+0x3d2>
		pages_needed = ceil(input_len / max_char_per_row);
 8000fce:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa16 	bl	8000404 <__aeabi_i2d>
 8000fd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000fdc:	f7ff fba6 	bl	800072c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f002 f826 	bl	8003038 <ceil>
 8000fec:	e9c7 0106 	strd	r0, r1, [r7, #24]
		pages_avail = (LCD_pages - (start_page-1));
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b67      	ldr	r3, [pc, #412]	@ (8001194 <multi_line_text+0x2d4>)
 8000ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ffa:	f7ff f8b5 	bl	8000168 <__aeabi_dsub>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001006:	f7ff f8af 	bl	8000168 <__aeabi_dsub>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fcfb 	bl	8000a0c <__aeabi_d2uiz>
 8001016:	4603      	mov	r3, r0
 8001018:	75fb      	strb	r3, [r7, #23]
		if ( pages_avail < pages_needed) {
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9f1 	bl	8000404 <__aeabi_i2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800102a:	f7ff fce5 	bl	80009f8 <__aeabi_dcmpgt>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	f040 812e 	bne.w	8001292 <multi_line_text+0x3d2>
			// Error
		} else if (pages_avail >= pages_needed ) {
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f9e3 	bl	8000404 <__aeabi_i2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001046:	f7ff fcc3 	bl	80009d0 <__aeabi_dcmple>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 8120 	beq.w	8001292 <multi_line_text+0x3d2>
			for (uint8_t page = start_page; page < (pages_needed+start_page); page++) {
 8001052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001056:	f7ff fcd9 	bl	8000a0c <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001060:	e100      	b.n	8001264 <multi_line_text+0x3a4>
				Page_addr[1] = (0xAF + page);
 8001062:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001066:	3b51      	subs	r3, #81	@ 0x51
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <multi_line_text+0x2d8>)
 800106c:	705a      	strb	r2, [r3, #1]
				HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Page_addr, 2, Timeout); // Set Page Address (Row Address)
 800106e:	233f      	movs	r3, #63	@ 0x3f
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	b299      	uxth	r1, r3
 8001074:	4b49      	ldr	r3, [pc, #292]	@ (800119c <multi_line_text+0x2dc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2302      	movs	r3, #2
 800107c:	4a46      	ldr	r2, [pc, #280]	@ (8001198 <multi_line_text+0x2d8>)
 800107e:	4848      	ldr	r0, [pc, #288]	@ (80011a0 <multi_line_text+0x2e0>)
 8001080:	f001 f85a 	bl	8002138 <HAL_I2C_Master_Transmit>
				HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, 2, Timeout); // Set Column Most significant Byte Address
 8001084:	233f      	movs	r3, #63	@ 0x3f
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	b299      	uxth	r1, r3
 800108a:	4b44      	ldr	r3, [pc, #272]	@ (800119c <multi_line_text+0x2dc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	4a44      	ldr	r2, [pc, #272]	@ (80011a4 <multi_line_text+0x2e4>)
 8001094:	4842      	ldr	r0, [pc, #264]	@ (80011a0 <multi_line_text+0x2e0>)
 8001096:	f001 f84f 	bl	8002138 <HAL_I2C_Master_Transmit>
				HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, 2, Timeout); // // Set Column Least significant Byte Address
 800109a:	233f      	movs	r3, #63	@ 0x3f
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b299      	uxth	r1, r3
 80010a0:	4b3e      	ldr	r3, [pc, #248]	@ (800119c <multi_line_text+0x2dc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2302      	movs	r3, #2
 80010a8:	4a3f      	ldr	r2, [pc, #252]	@ (80011a8 <multi_line_text+0x2e8>)
 80010aa:	483d      	ldr	r0, [pc, #244]	@ (80011a0 <multi_line_text+0x2e0>)
 80010ac:	f001 f844 	bl	8002138 <HAL_I2C_Master_Transmit>
				if (page >start_page) {
 80010b0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9a5 	bl	8000404 <__aeabi_i2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010c2:	f7ff fc7b 	bl	80009bc <__aeabi_dcmplt>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d01f      	beq.n	800110c <multi_line_text+0x24c>
					input_pos=max_char_per_row;
 80010cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80010d0:	f7ff fc9c 	bl	8000a0c <__aeabi_d2uiz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					page_counter++;
 80010da:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80010de:	3301      	adds	r3, #1
 80010e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
					max_char_per_row = max_char_per_row + (LCD_pixels_width/char_width);
 80010e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80010e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f986 	bl	8000404 <__aeabi_i2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001100:	f7ff f834 	bl	800016c <__adddf3>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
				}
				for (uint8_t line_pos = input_pos; line_pos < max_char_per_row; line_pos++) {
 800110c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001110:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8001114:	e092      	b.n	800123c <multi_line_text+0x37c>
					input_char = string_in[line_pos];
 8001116:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	75bb      	strb	r3, [r7, #22]
					hex_font_pos = (char_width * (input_char - font_offset));
 8001122:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001126:	b29b      	uxth	r3, r3
 8001128:	7db9      	ldrb	r1, [r7, #22]
 800112a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800112e:	1a8a      	subs	r2, r1, r2
 8001130:	b292      	uxth	r2, r2
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	82bb      	strh	r3, [r7, #20]
					if (input_len > 0) {
 8001138:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800113c:	2b00      	cmp	r3, #0
 800113e:	d078      	beq.n	8001232 <multi_line_text+0x372>
						for (uint8_t x = line_pos; x < line_pos + char_width; x++) {
 8001140:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001144:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8001148:	e057      	b.n	80011fa <multi_line_text+0x33a>
							for (uint8_t char_hex = 0; char_hex < char_width ; char_hex++) { //Sequentially saves the contents of the char_hex_array to the LCD
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001150:	e048      	b.n	80011e4 <multi_line_text+0x324>
								if (inversion==1){
 8001152:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001156:	2b01      	cmp	r3, #1
 8001158:	d12a      	bne.n	80011b0 <multi_line_text+0x2f0>
									char_hex_array[char_hex + 1] = ~LCDFonts[font_name][hex_font_pos + char_hex];
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	8ab9      	ldrh	r1, [r7, #20]
 800115e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001162:	4419      	add	r1, r3
 8001164:	4811      	ldr	r0, [pc, #68]	@ (80011ac <multi_line_text+0x2ec>)
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	4403      	add	r3, r0
 8001170:	440b      	add	r3, r1
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001178:	3301      	adds	r3, #1
 800117a:	43d2      	mvns	r2, r2
 800117c:	b2d1      	uxtb	r1, r2
 800117e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001180:	54d1      	strb	r1, [r2, r3]
 8001182:	e02a      	b.n	80011da <multi_line_text+0x31a>
 8001184:	40200000 	.word	0x40200000
 8001188:	20000000 	.word	0x20000000
 800118c:	40220000 	.word	0x40220000
 8001190:	20000010 	.word	0x20000010
 8001194:	3ff00000 	.word	0x3ff00000
 8001198:	20000004 	.word	0x20000004
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	2000003c 	.word	0x2000003c
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000090 	.word	0x20000090
 80011ac:	08003268 	.word	0x08003268
								}else{
									char_hex_array[char_hex + 1] = LCDFonts[font_name][hex_font_pos + char_hex];
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	8ab9      	ldrh	r1, [r7, #20]
 80011b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80011b8:	18c8      	adds	r0, r1, r3
 80011ba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80011be:	1c59      	adds	r1, r3, #1
 80011c0:	4c37      	ldr	r4, [pc, #220]	@ (80012a0 <multi_line_text+0x3e0>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	4423      	add	r3, r4
 80011cc:	4403      	add	r3, r0
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	545a      	strb	r2, [r3, r1]
									HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f000 fbad 	bl	8001934 <HAL_Delay>
							for (uint8_t char_hex = 0; char_hex < char_width ; char_hex++) { //Sequentially saves the contents of the char_hex_array to the LCD
 80011da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80011de:	3301      	adds	r3, #1
 80011e0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80011e4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80011e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3b0      	bcc.n	8001152 <multi_line_text+0x292>
						for (uint8_t x = line_pos; x < line_pos + char_width; x++) {
 80011f0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80011f4:	3301      	adds	r3, #1
 80011f6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80011fa:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80011fe:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 8001202:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001206:	440b      	add	r3, r1
 8001208:	429a      	cmp	r2, r3
 800120a:	db9e      	blt.n	800114a <multi_line_text+0x28a>
								}
							}
						}
						HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1),char_hex_array, Send_size, Timeout);
 800120c:	233f      	movs	r3, #63	@ 0x3f
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	b299      	uxth	r1, r3
 8001212:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b22      	ldr	r3, [pc, #136]	@ (80012a4 <multi_line_text+0x3e4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001222:	4821      	ldr	r0, [pc, #132]	@ (80012a8 <multi_line_text+0x3e8>)
 8001224:	f000 ff88 	bl	8002138 <HAL_I2C_Master_Transmit>
						//HAL_Delay(25);
						input_len--;
 8001228:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800122c:	3b01      	subs	r3, #1
 800122e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				for (uint8_t line_pos = input_pos; line_pos < max_char_per_row; line_pos++) {
 8001232:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001236:	3301      	adds	r3, #1
 8001238:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800123c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f8df 	bl	8000404 <__aeabi_i2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800124e:	f7ff fbd3 	bl	80009f8 <__aeabi_dcmpgt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	f47f af5e 	bne.w	8001116 <multi_line_text+0x256>
			for (uint8_t page = start_page; page < (pages_needed+start_page); page++) {
 800125a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800125e:	3301      	adds	r3, #1
 8001260:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001264:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8cb 	bl	8000404 <__aeabi_i2d>
 800126e:	4604      	mov	r4, r0
 8001270:	460d      	mov	r5, r1
 8001272:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001276:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800127a:	f7fe ff77 	bl	800016c <__adddf3>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7ff fb99 	bl	80009bc <__aeabi_dcmplt>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f aee8 	bne.w	8001062 <multi_line_text+0x1a2>
 8001292:	46b5      	mov	sp, r6
	}

	else {
		//Error massage
	}
}
 8001294:	bf00      	nop
 8001296:	374c      	adds	r7, #76	@ 0x4c
 8001298:	46bd      	mov	sp, r7
 800129a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800129e:	bf00      	nop
 80012a0:	08003268 	.word	0x08003268
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	2000003c 	.word	0x2000003c

080012ac <reset_cursor>:

// ===================================================================================================================================
//  # This function will set the cursor position to the top left corner (Page 0, Column 0) #
// ===================================================================================================================================

void reset_cursor(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af02      	add	r7, sp, #8
	Page_addr[1] = 0xB0;
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <reset_cursor+0x60>)
 80012b4:	22b0      	movs	r2, #176	@ 0xb0
 80012b6:	705a      	strb	r2, [r3, #1]
	Col_addr_MSB[1] = 0x10;
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <reset_cursor+0x64>)
 80012ba:	2210      	movs	r2, #16
 80012bc:	705a      	strb	r2, [r3, #1]
	Col_addr_LSB[1] = 0x00;
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <reset_cursor+0x68>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Page_addr, 2, Timeout); // Set Page Address (Row Address)
 80012c4:	233f      	movs	r3, #63	@ 0x3f
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	b299      	uxth	r1, r3
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <reset_cursor+0x6c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2302      	movs	r3, #2
 80012d2:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <reset_cursor+0x60>)
 80012d4:	4811      	ldr	r0, [pc, #68]	@ (800131c <reset_cursor+0x70>)
 80012d6:	f000 ff2f 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, 2,Timeout); // Set Column Most significant Byte Address
 80012da:	233f      	movs	r3, #63	@ 0x3f
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	b299      	uxth	r1, r3
 80012e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <reset_cursor+0x6c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2302      	movs	r3, #2
 80012e8:	4a09      	ldr	r2, [pc, #36]	@ (8001310 <reset_cursor+0x64>)
 80012ea:	480c      	ldr	r0, [pc, #48]	@ (800131c <reset_cursor+0x70>)
 80012ec:	f000 ff24 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, 2,Timeout); // // Set Column Least significant Byte Address
 80012f0:	233f      	movs	r3, #63	@ 0x3f
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	b299      	uxth	r1, r3
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <reset_cursor+0x6c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2302      	movs	r3, #2
 80012fe:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <reset_cursor+0x68>)
 8001300:	4806      	ldr	r0, [pc, #24]	@ (800131c <reset_cursor+0x70>)
 8001302:	f000 ff19 	bl	8002138 <HAL_I2C_Master_Transmit>
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000004 	.word	0x20000004
 8001310:	20000008 	.word	0x20000008
 8001314:	20000090 	.word	0x20000090
 8001318:	2000000c 	.word	0x2000000c
 800131c:	2000003c 	.word	0x2000003c

08001320 <clear_screen>:

// ===================================================================================================================================
//  # This function will clear the screen by writing 0x00 on every line , from left to right,top to bottom #
// ===================================================================================================================================

void clear_screen(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af02      	add	r7, sp, #8

	uint8_t Blank_line_data[2]  = { 0x40, 0x00 };
 8001326:	2340      	movs	r3, #64	@ 0x40
 8001328:	80bb      	strh	r3, [r7, #4]

	for (uint8_t c = 0; c < 8; c++) { // sending to 8 rows (pages) (DDRAM), each row is 1 Byte (8 Bits high)
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e03c      	b.n	80013aa <clear_screen+0x8a>
		Page_addr[1] = (0xB0+c);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3b50      	subs	r3, #80	@ 0x50
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <clear_screen+0x9c>)
 8001338:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Page_addr, 2, Timeout); // Set Page Address (Row Address)
 800133a:	233f      	movs	r3, #63	@ 0x3f
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	b299      	uxth	r1, r3
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <clear_screen+0xa0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2302      	movs	r3, #2
 8001348:	4a1c      	ldr	r2, [pc, #112]	@ (80013bc <clear_screen+0x9c>)
 800134a:	481e      	ldr	r0, [pc, #120]	@ (80013c4 <clear_screen+0xa4>)
 800134c:	f000 fef4 	bl	8002138 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, 2,Timeout); // Set Column Most significant Byte Address
 8001350:	233f      	movs	r3, #63	@ 0x3f
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	b299      	uxth	r1, r3
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <clear_screen+0xa0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2302      	movs	r3, #2
 800135e:	4a1a      	ldr	r2, [pc, #104]	@ (80013c8 <clear_screen+0xa8>)
 8001360:	4818      	ldr	r0, [pc, #96]	@ (80013c4 <clear_screen+0xa4>)
 8001362:	f000 fee9 	bl	8002138 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, 2,Timeout); // // Set Column Least significant Byte Address
 8001366:	233f      	movs	r3, #63	@ 0x3f
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	b299      	uxth	r1, r3
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <clear_screen+0xa0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2302      	movs	r3, #2
 8001374:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <clear_screen+0xac>)
 8001376:	4813      	ldr	r0, [pc, #76]	@ (80013c4 <clear_screen+0xa4>)
 8001378:	f000 fede 	bl	8002138 <HAL_I2C_Master_Transmit>
		for (uint8_t d = 0; d < 131; d++) { // sending to 132 columns (DDRAM), 1 byte at a time
 800137c:	2300      	movs	r3, #0
 800137e:	71bb      	strb	r3, [r7, #6]
 8001380:	e00d      	b.n	800139e <clear_screen+0x7e>
			HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Blank_line_data, // Send data prefixed by 0x40 (ST7567S Manual page
 8001382:	233f      	movs	r3, #63	@ 0x3f
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	b299      	uxth	r1, r3
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <clear_screen+0xa0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1d3a      	adds	r2, r7, #4
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2302      	movs	r3, #2
 8001392:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <clear_screen+0xa4>)
 8001394:	f000 fed0 	bl	8002138 <HAL_I2C_Master_Transmit>
		for (uint8_t d = 0; d < 131; d++) { // sending to 132 columns (DDRAM), 1 byte at a time
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	3301      	adds	r3, #1
 800139c:	71bb      	strb	r3, [r7, #6]
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	2b82      	cmp	r3, #130	@ 0x82
 80013a2:	d9ee      	bls.n	8001382 <clear_screen+0x62>
	for (uint8_t c = 0; c < 8; c++) { // sending to 8 rows (pages) (DDRAM), each row is 1 Byte (8 Bits high)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	3301      	adds	r3, #1
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b07      	cmp	r3, #7
 80013ae:	d9bf      	bls.n	8001330 <clear_screen+0x10>
					2, Timeout);
			//HAL_Delay(5); // This line can be un_commented to activate and / or adjust delay to slow down the execution
		}
	}
	reset_cursor();
 80013b0:	f7ff ff7c 	bl	80012ac <reset_cursor>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000004 	.word	0x20000004
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	2000003c 	.word	0x2000003c
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000090 	.word	0x20000090

080013d0 <LCD_Init>:
}

// ===================================================================================================================================
//  # This function will clear the screen by writing 0x00 on every line , from left to right,top to bottom #
// ===================================================================================================================================
void LCD_Init() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	@ 0x38
 80013d4:	af02      	add	r7, sp, #8

	uint8_t Restart[2] 				= { 0x00, 0xE2 };
 80013d6:	f44f 4362 	mov.w	r3, #57856	@ 0xe200
 80013da:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint8_t Bias_select[2] 			= { 0x00, 0xA2 };
 80013dc:	f44f 4322 	mov.w	r3, #41472	@ 0xa200
 80013e0:	853b      	strh	r3, [r7, #40]	@ 0x28
	uint8_t SEG_direction[2] 		= { 0x00, 0xA0 };
 80013e2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80013e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint8_t COM_direction[2] 		= { 0x00, 0xC8 };
 80013e8:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80013ec:	843b      	strh	r3, [r7, #32]
	uint8_t Regulation_ratio[2]		= { 0x00, 0x25 };
 80013ee:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 80013f2:	83bb      	strh	r3, [r7, #28]
	uint8_t Set_EV_com[2] 			= { 0x00, 0x81 };
 80013f4:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80013f8:	833b      	strh	r3, [r7, #24]
	uint8_t Set_EV[2] 				= { 0x00, 0x20 };
 80013fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013fe:	82bb      	strh	r3, [r7, #20]
	uint8_t Booster[2] 				= { 0x00, 0x2C };
 8001400:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001404:	823b      	strh	r3, [r7, #16]
	uint8_t Regulator[2] 			= { 0x00, 0x2E };
 8001406:	f44f 5338 	mov.w	r3, #11776	@ 0x2e00
 800140a:	81bb      	strh	r3, [r7, #12]
	uint8_t Follower[2] 			= { 0x00, 0x2F };
 800140c:	f44f 533c 	mov.w	r3, #12032	@ 0x2f00
 8001410:	813b      	strh	r3, [r7, #8]
	uint8_t Display_ON[2] 			= { 0x00, 0xAF };
 8001412:	f44f 432f 	mov.w	r3, #44800	@ 0xaf00
 8001416:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Restart, Data_size, Timeout);
 8001418:	233f      	movs	r3, #63	@ 0x3f
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	b299      	uxth	r1, r3
 800141e:	4b5c      	ldr	r3, [pc, #368]	@ (8001590 <LCD_Init+0x1c0>)
 8001420:	8818      	ldrh	r0, [r3, #0]
 8001422:	4b5c      	ldr	r3, [pc, #368]	@ (8001594 <LCD_Init+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4603      	mov	r3, r0
 800142e:	485a      	ldr	r0, [pc, #360]	@ (8001598 <LCD_Init+0x1c8>)
 8001430:	f000 fe82 	bl	8002138 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5); // If LCD is not working, try un_commenting this line with the 5ms delay
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Bias_select, Data_size, Timeout);
 8001434:	233f      	movs	r3, #63	@ 0x3f
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	b299      	uxth	r1, r3
 800143a:	4b55      	ldr	r3, [pc, #340]	@ (8001590 <LCD_Init+0x1c0>)
 800143c:	8818      	ldrh	r0, [r3, #0]
 800143e:	4b55      	ldr	r3, [pc, #340]	@ (8001594 <LCD_Init+0x1c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4603      	mov	r3, r0
 800144a:	4853      	ldr	r0, [pc, #332]	@ (8001598 <LCD_Init+0x1c8>)
 800144c:	f000 fe74 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), SEG_direction, Data_size, Timeout);
 8001450:	233f      	movs	r3, #63	@ 0x3f
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	b299      	uxth	r1, r3
 8001456:	4b4e      	ldr	r3, [pc, #312]	@ (8001590 <LCD_Init+0x1c0>)
 8001458:	8818      	ldrh	r0, [r3, #0]
 800145a:	4b4e      	ldr	r3, [pc, #312]	@ (8001594 <LCD_Init+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4603      	mov	r3, r0
 8001466:	484c      	ldr	r0, [pc, #304]	@ (8001598 <LCD_Init+0x1c8>)
 8001468:	f000 fe66 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), COM_direction, Data_size, Timeout);
 800146c:	233f      	movs	r3, #63	@ 0x3f
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	b299      	uxth	r1, r3
 8001472:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <LCD_Init+0x1c0>)
 8001474:	8818      	ldrh	r0, [r3, #0]
 8001476:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <LCD_Init+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f107 0220 	add.w	r2, r7, #32
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4603      	mov	r3, r0
 8001482:	4845      	ldr	r0, [pc, #276]	@ (8001598 <LCD_Init+0x1c8>)
 8001484:	f000 fe58 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Regulation_ratio, Data_size, Timeout);
 8001488:	233f      	movs	r3, #63	@ 0x3f
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	b299      	uxth	r1, r3
 800148e:	4b40      	ldr	r3, [pc, #256]	@ (8001590 <LCD_Init+0x1c0>)
 8001490:	8818      	ldrh	r0, [r3, #0]
 8001492:	4b40      	ldr	r3, [pc, #256]	@ (8001594 <LCD_Init+0x1c4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f107 021c 	add.w	r2, r7, #28
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	4603      	mov	r3, r0
 800149e:	483e      	ldr	r0, [pc, #248]	@ (8001598 <LCD_Init+0x1c8>)
 80014a0:	f000 fe4a 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Set_EV_com, Data_size, Timeout);
 80014a4:	233f      	movs	r3, #63	@ 0x3f
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	b299      	uxth	r1, r3
 80014aa:	4b39      	ldr	r3, [pc, #228]	@ (8001590 <LCD_Init+0x1c0>)
 80014ac:	8818      	ldrh	r0, [r3, #0]
 80014ae:	4b39      	ldr	r3, [pc, #228]	@ (8001594 <LCD_Init+0x1c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f107 0218 	add.w	r2, r7, #24
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	4603      	mov	r3, r0
 80014ba:	4837      	ldr	r0, [pc, #220]	@ (8001598 <LCD_Init+0x1c8>)
 80014bc:	f000 fe3c 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Set_EV, Data_size, Timeout);
 80014c0:	233f      	movs	r3, #63	@ 0x3f
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	b299      	uxth	r1, r3
 80014c6:	4b32      	ldr	r3, [pc, #200]	@ (8001590 <LCD_Init+0x1c0>)
 80014c8:	8818      	ldrh	r0, [r3, #0]
 80014ca:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <LCD_Init+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f107 0214 	add.w	r2, r7, #20
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4603      	mov	r3, r0
 80014d6:	4830      	ldr	r0, [pc, #192]	@ (8001598 <LCD_Init+0x1c8>)
 80014d8:	f000 fe2e 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Booster, Data_size, Timeout);
 80014dc:	233f      	movs	r3, #63	@ 0x3f
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	b299      	uxth	r1, r3
 80014e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <LCD_Init+0x1c0>)
 80014e4:	8818      	ldrh	r0, [r3, #0]
 80014e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <LCD_Init+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f107 0210 	add.w	r2, r7, #16
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	4603      	mov	r3, r0
 80014f2:	4829      	ldr	r0, [pc, #164]	@ (8001598 <LCD_Init+0x1c8>)
 80014f4:	f000 fe20 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Regulator, Data_size, Timeout);
 80014f8:	233f      	movs	r3, #63	@ 0x3f
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	b299      	uxth	r1, r3
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <LCD_Init+0x1c0>)
 8001500:	8818      	ldrh	r0, [r3, #0]
 8001502:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <LCD_Init+0x1c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f107 020c 	add.w	r2, r7, #12
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	4603      	mov	r3, r0
 800150e:	4822      	ldr	r0, [pc, #136]	@ (8001598 <LCD_Init+0x1c8>)
 8001510:	f000 fe12 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Follower, Data_size, Timeout);
 8001514:	233f      	movs	r3, #63	@ 0x3f
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b299      	uxth	r1, r3
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <LCD_Init+0x1c0>)
 800151c:	8818      	ldrh	r0, [r3, #0]
 800151e:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <LCD_Init+0x1c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f107 0208 	add.w	r2, r7, #8
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4603      	mov	r3, r0
 800152a:	481b      	ldr	r0, [pc, #108]	@ (8001598 <LCD_Init+0x1c8>)
 800152c:	f000 fe04 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, Data_size,Timeout);
 8001530:	233f      	movs	r3, #63	@ 0x3f
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	b299      	uxth	r1, r3
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <LCD_Init+0x1c0>)
 8001538:	881a      	ldrh	r2, [r3, #0]
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <LCD_Init+0x1c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4613      	mov	r3, r2
 8001542:	4a16      	ldr	r2, [pc, #88]	@ (800159c <LCD_Init+0x1cc>)
 8001544:	4814      	ldr	r0, [pc, #80]	@ (8001598 <LCD_Init+0x1c8>)
 8001546:	f000 fdf7 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, Data_size,Timeout);
 800154a:	233f      	movs	r3, #63	@ 0x3f
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	b299      	uxth	r1, r3
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <LCD_Init+0x1c0>)
 8001552:	881a      	ldrh	r2, [r3, #0]
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <LCD_Init+0x1c4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <LCD_Init+0x1d0>)
 800155e:	480e      	ldr	r0, [pc, #56]	@ (8001598 <LCD_Init+0x1c8>)
 8001560:	f000 fdea 	bl	8002138 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f000 f9e5 	bl	8001934 <HAL_Delay>
	clear_screen();
 800156a:	f7ff fed9 	bl	8001320 <clear_screen>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Display_ON, Data_size, Timeout);
 800156e:	233f      	movs	r3, #63	@ 0x3f
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	b299      	uxth	r1, r3
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <LCD_Init+0x1c0>)
 8001576:	8818      	ldrh	r0, [r3, #0]
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <LCD_Init+0x1c4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	1d3a      	adds	r2, r7, #4
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	4603      	mov	r3, r0
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <LCD_Init+0x1c8>)
 8001584:	f000 fdd8 	bl	8002138 <HAL_I2C_Master_Transmit>

}
 8001588:	bf00      	nop
 800158a:	3730      	adds	r7, #48	@ 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000000a 	.word	0x2000000a
 8001594:	2000000c 	.word	0x2000000c
 8001598:	2000003c 	.word	0x2000003c
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000090 	.word	0x20000090

080015a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af02      	add	r7, sp, #8

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80015aa:	f000 f961 	bl	8001870 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015ae:	f000 f88d 	bl	80016cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015b2:	f7ff fa4b 	bl	8000a4c <MX_GPIO_Init>
	MX_I2C1_Init();
 80015b6:	f7ff fa87 	bl	8000ac8 <MX_I2C1_Init>
	//************************************************************************************************************
	//************************************************************************************************************
	//
	//************************************************************************************************************
	//************************************************************************************************************
	LCD_Init();
 80015ba:	f7ff ff09 	bl	80013d0 <LCD_Init>
	clear_screen();
 80015be:	f7ff feaf 	bl	8001320 <clear_screen>
	multi_line_text(1,"1",0,0);
 80015c2:	2300      	movs	r3, #0
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001684 <main+0xe0>)
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	492e      	ldr	r1, [pc, #184]	@ (8001688 <main+0xe4>)
 80015d0:	f7ff fc76 	bl	8000ec0 <multi_line_text>
	multi_line_text(2,"2",0,0);
 80015d4:	2300      	movs	r3, #0
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2300      	movs	r3, #0
 80015da:	4a2c      	ldr	r2, [pc, #176]	@ (800168c <main+0xe8>)
 80015dc:	f04f 0000 	mov.w	r0, #0
 80015e0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015e4:	f7ff fc6c 	bl	8000ec0 <multi_line_text>
	multi_line_text(3,"3",0,0);
 80015e8:	2300      	movs	r3, #0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	4a28      	ldr	r2, [pc, #160]	@ (8001690 <main+0xec>)
 80015f0:	f04f 0000 	mov.w	r0, #0
 80015f4:	4927      	ldr	r1, [pc, #156]	@ (8001694 <main+0xf0>)
 80015f6:	f7ff fc63 	bl	8000ec0 <multi_line_text>
	multi_line_text(4,"4",0,0);
 80015fa:	2300      	movs	r3, #0
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	4a25      	ldr	r2, [pc, #148]	@ (8001698 <main+0xf4>)
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	4925      	ldr	r1, [pc, #148]	@ (800169c <main+0xf8>)
 8001608:	f7ff fc5a 	bl	8000ec0 <multi_line_text>
	multi_line_text(5,"5",0,0);
 800160c:	2300      	movs	r3, #0
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <main+0xfc>)
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	4922      	ldr	r1, [pc, #136]	@ (80016a4 <main+0x100>)
 800161a:	f7ff fc51 	bl	8000ec0 <multi_line_text>
	multi_line_text(6,"6",0,0);
 800161e:	2300      	movs	r3, #0
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	4a20      	ldr	r2, [pc, #128]	@ (80016a8 <main+0x104>)
 8001626:	f04f 0000 	mov.w	r0, #0
 800162a:	4920      	ldr	r1, [pc, #128]	@ (80016ac <main+0x108>)
 800162c:	f7ff fc48 	bl	8000ec0 <multi_line_text>
	multi_line_text(7,"7",0,0);
 8001630:	2300      	movs	r3, #0
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	4a1e      	ldr	r2, [pc, #120]	@ (80016b0 <main+0x10c>)
 8001638:	f04f 0000 	mov.w	r0, #0
 800163c:	491d      	ldr	r1, [pc, #116]	@ (80016b4 <main+0x110>)
 800163e:	f7ff fc3f 	bl	8000ec0 <multi_line_text>
	multi_line_text(8,"8",0,0);
 8001642:	2300      	movs	r3, #0
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	4a1b      	ldr	r2, [pc, #108]	@ (80016b8 <main+0x114>)
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	491b      	ldr	r1, [pc, #108]	@ (80016bc <main+0x118>)
 8001650:	f7ff fc36 	bl	8000ec0 <multi_line_text>
	//multi_line_text(8,"abc@WXYZ123&$#",1,1);
	//draw_cuboid(24,24,5,43,1);
	//draw_horizontal_line(32,16,16);
	//draw_vertical_line(35,7,2);
	//multi_horizontal_line(131, 0, 0, 32, 2);
	vert_lines(33,10, 3);
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <main+0xf0>)
 800165a:	e9cd 2300 	strd	r2, r3, [sp]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <main+0x11c>)
 8001664:	f04f 0000 	mov.w	r0, #0
 8001668:	4916      	ldr	r1, [pc, #88]	@ (80016c4 <main+0x120>)
 800166a:	f7ff faab 	bl	8000bc4 <vert_lines>
	//HAL_Delay(1000);
	//draw_cuboid(29, 6,20, 8, 11);
	//HAL_Delay(1000);


	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800166e:	2120      	movs	r1, #32
 8001670:	4815      	ldr	r0, [pc, #84]	@ (80016c8 <main+0x124>)
 8001672:	f000 fc03 	bl	8001e7c <HAL_GPIO_TogglePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2120      	movs	r1, #32
 800167a:	4813      	ldr	r0, [pc, #76]	@ (80016c8 <main+0x124>)
 800167c:	f000 fbe6 	bl	8001e4c <HAL_GPIO_WritePin>
 8001680:	e7f9      	b.n	8001676 <main+0xd2>
 8001682:	bf00      	nop
 8001684:	08003248 	.word	0x08003248
 8001688:	3ff00000 	.word	0x3ff00000
 800168c:	0800324c 	.word	0x0800324c
 8001690:	08003250 	.word	0x08003250
 8001694:	40080000 	.word	0x40080000
 8001698:	08003254 	.word	0x08003254
 800169c:	40100000 	.word	0x40100000
 80016a0:	08003258 	.word	0x08003258
 80016a4:	40140000 	.word	0x40140000
 80016a8:	0800325c 	.word	0x0800325c
 80016ac:	40180000 	.word	0x40180000
 80016b0:	08003260 	.word	0x08003260
 80016b4:	401c0000 	.word	0x401c0000
 80016b8:	08003264 	.word	0x08003264
 80016bc:	40200000 	.word	0x40200000
 80016c0:	40240000 	.word	0x40240000
 80016c4:	40408000 	.word	0x40408000
 80016c8:	40010800 	.word	0x40010800

080016cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b090      	sub	sp, #64	@ 0x40
 80016d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	2228      	movs	r2, #40	@ 0x28
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fc80 	bl	8002fe0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	2310      	movs	r3, #16
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	2302      	movs	r3, #2
 80016fc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016fe:	2300      	movs	r3, #0
 8001700:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001702:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001706:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	4618      	mov	r0, r3
 800170e:	f001 f86b 	bl	80027e8 <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x50>
		Error_Handler();
 8001718:	f000 f819 	bl	800174e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001720:	2302      	movs	r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800172c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2102      	movs	r1, #2
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fad8 	bl	8002cec <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x7a>
		Error_Handler();
 8001742:	f000 f804 	bl	800174e <Error_Handler>
	}
}
 8001746:	bf00      	nop
 8001748:	3740      	adds	r7, #64	@ 0x40
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001752:	b672      	cpsid	i
}
 8001754:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001756:	bf00      	nop
 8001758:	e7fd      	b.n	8001756 <Error_Handler+0x8>
	...

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0e      	ldr	r2, [pc, #56]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <HAL_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_MspInit+0x60>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <HAL_MspInit+0x60>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <NMI_Handler+0x4>

080017c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <MemManage_Handler+0x4>

080017d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001810:	f000 f874 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001824:	f7ff fff8 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480b      	ldr	r0, [pc, #44]	@ (8001858 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800182a:	490c      	ldr	r1, [pc, #48]	@ (800185c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800182c:	4a0c      	ldr	r2, [pc, #48]	@ (8001860 <LoopFillZerobss+0x16>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a09      	ldr	r2, [pc, #36]	@ (8001864 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001840:	4c09      	ldr	r4, [pc, #36]	@ (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184e:	f001 fbcf 	bl	8002ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001852:	f7ff fea7 	bl	80015a4 <main>
  bx lr
 8001856:	4770      	bx	lr
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001860:	080038a4 	.word	0x080038a4
  ldr r2, =_sbss
 8001864:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001868:	20000098 	.word	0x20000098

0800186c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC1_2_IRQHandler>
	...

08001870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_Init+0x28>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_Init+0x28>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f92b 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	2000      	movs	r0, #0
 8001888:	f000 f808 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff ff66 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_InitTick+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f935 	bl	8001b2a <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f90b 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018dc:	4a06      	ldr	r2, [pc, #24]	@ (80018f8 <HAL_InitTick+0x5c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000014 	.word	0x20000014
 80018f4:	2000001c 	.word	0x2000001c
 80018f8:	20000018 	.word	0x20000018

080018fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <HAL_IncTick+0x1c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_IncTick+0x20>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a03      	ldr	r2, [pc, #12]	@ (800191c <HAL_IncTick+0x20>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	2000001c 	.word	0x2000001c
 800191c:	20000094 	.word	0x20000094

08001920 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b02      	ldr	r3, [pc, #8]	@ (8001930 <HAL_GetTick+0x10>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000094 	.word	0x20000094

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff fff0 	bl	8001920 <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_Delay+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffe0 	bl	8001920 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000001c 	.word	0x2000001c

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	@ (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	@ (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff90 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff49 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff5e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff90 	bl	8001a34 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5f 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffb0 	bl	8001a98 <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b08b      	sub	sp, #44	@ 0x2c
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e169      	b.n	8001e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8158 	bne.w	8001e26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a9a      	ldr	r2, [pc, #616]	@ (8001de4 <HAL_GPIO_Init+0x2a0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d05e      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001b80:	4a98      	ldr	r2, [pc, #608]	@ (8001de4 <HAL_GPIO_Init+0x2a0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d875      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001b86:	4a98      	ldr	r2, [pc, #608]	@ (8001de8 <HAL_GPIO_Init+0x2a4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d058      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001b8c:	4a96      	ldr	r2, [pc, #600]	@ (8001de8 <HAL_GPIO_Init+0x2a4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d86f      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001b92:	4a96      	ldr	r2, [pc, #600]	@ (8001dec <HAL_GPIO_Init+0x2a8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d052      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001b98:	4a94      	ldr	r2, [pc, #592]	@ (8001dec <HAL_GPIO_Init+0x2a8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d869      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001b9e:	4a94      	ldr	r2, [pc, #592]	@ (8001df0 <HAL_GPIO_Init+0x2ac>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d04c      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001ba4:	4a92      	ldr	r2, [pc, #584]	@ (8001df0 <HAL_GPIO_Init+0x2ac>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d863      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001baa:	4a92      	ldr	r2, [pc, #584]	@ (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d046      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
 8001bb0:	4a90      	ldr	r2, [pc, #576]	@ (8001df4 <HAL_GPIO_Init+0x2b0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d85d      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001bb6:	2b12      	cmp	r3, #18
 8001bb8:	d82a      	bhi.n	8001c10 <HAL_GPIO_Init+0xcc>
 8001bba:	2b12      	cmp	r3, #18
 8001bbc:	d859      	bhi.n	8001c72 <HAL_GPIO_Init+0x12e>
 8001bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc4 <HAL_GPIO_Init+0x80>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001c3f 	.word	0x08001c3f
 8001bc8:	08001c19 	.word	0x08001c19
 8001bcc:	08001c2b 	.word	0x08001c2b
 8001bd0:	08001c6d 	.word	0x08001c6d
 8001bd4:	08001c73 	.word	0x08001c73
 8001bd8:	08001c73 	.word	0x08001c73
 8001bdc:	08001c73 	.word	0x08001c73
 8001be0:	08001c73 	.word	0x08001c73
 8001be4:	08001c73 	.word	0x08001c73
 8001be8:	08001c73 	.word	0x08001c73
 8001bec:	08001c73 	.word	0x08001c73
 8001bf0:	08001c73 	.word	0x08001c73
 8001bf4:	08001c73 	.word	0x08001c73
 8001bf8:	08001c73 	.word	0x08001c73
 8001bfc:	08001c73 	.word	0x08001c73
 8001c00:	08001c73 	.word	0x08001c73
 8001c04:	08001c73 	.word	0x08001c73
 8001c08:	08001c21 	.word	0x08001c21
 8001c0c:	08001c35 	.word	0x08001c35
 8001c10:	4a79      	ldr	r2, [pc, #484]	@ (8001df8 <HAL_GPIO_Init+0x2b4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c16:	e02c      	b.n	8001c72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	623b      	str	r3, [r7, #32]
          break;
 8001c1e:	e029      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	3304      	adds	r3, #4
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e024      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	3308      	adds	r3, #8
 8001c30:	623b      	str	r3, [r7, #32]
          break;
 8001c32:	e01f      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	623b      	str	r3, [r7, #32]
          break;
 8001c3c:	e01a      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c46:	2304      	movs	r3, #4
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e013      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c54:	2308      	movs	r3, #8
 8001c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	611a      	str	r2, [r3, #16]
          break;
 8001c5e:	e009      	b.n	8001c74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c60:	2308      	movs	r3, #8
 8001c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	615a      	str	r2, [r3, #20]
          break;
 8001c6a:	e003      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
          break;
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x130>
          break;
 8001c72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2bff      	cmp	r3, #255	@ 0xff
 8001c78:	d801      	bhi.n	8001c7e <HAL_GPIO_Init+0x13a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	e001      	b.n	8001c82 <HAL_GPIO_Init+0x13e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2bff      	cmp	r3, #255	@ 0xff
 8001c88:	d802      	bhi.n	8001c90 <HAL_GPIO_Init+0x14c>
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	e002      	b.n	8001c96 <HAL_GPIO_Init+0x152>
 8001c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c92:	3b08      	subs	r3, #8
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	210f      	movs	r1, #15
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	6a39      	ldr	r1, [r7, #32]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 80b1 	beq.w	8001e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8001dfc <HAL_GPIO_Init+0x2b8>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001dfc <HAL_GPIO_Init+0x2b8>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001dfc <HAL_GPIO_Init+0x2b8>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cdc:	4a48      	ldr	r2, [pc, #288]	@ (8001e00 <HAL_GPIO_Init+0x2bc>)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a40      	ldr	r2, [pc, #256]	@ (8001e04 <HAL_GPIO_Init+0x2c0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_GPIO_Init+0x1ec>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e08 <HAL_GPIO_Init+0x2c4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00d      	beq.n	8001d2c <HAL_GPIO_Init+0x1e8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3e      	ldr	r2, [pc, #248]	@ (8001e0c <HAL_GPIO_Init+0x2c8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <HAL_GPIO_Init+0x1e4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e10 <HAL_GPIO_Init+0x2cc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_GPIO_Init+0x1e0>
 8001d20:	2303      	movs	r3, #3
 8001d22:	e006      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e004      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e002      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d30:	2300      	movs	r3, #0
 8001d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d34:	f002 0203 	and.w	r2, r2, #3
 8001d38:	0092      	lsls	r2, r2, #2
 8001d3a:	4093      	lsls	r3, r2
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d42:	492f      	ldr	r1, [pc, #188]	@ (8001e00 <HAL_GPIO_Init+0x2bc>)
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	492c      	ldr	r1, [pc, #176]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	4928      	ldr	r1, [pc, #160]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	4922      	ldr	r1, [pc, #136]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60cb      	str	r3, [r1, #12]
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	491e      	ldr	r1, [pc, #120]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4918      	ldr	r1, [pc, #96]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dba:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4914      	ldr	r1, [pc, #80]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d021      	beq.n	8001e18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	490e      	ldr	r1, [pc, #56]	@ (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
 8001de0:	e021      	b.n	8001e26 <HAL_GPIO_Init+0x2e2>
 8001de2:	bf00      	nop
 8001de4:	10320000 	.word	0x10320000
 8001de8:	10310000 	.word	0x10310000
 8001dec:	10220000 	.word	0x10220000
 8001df0:	10210000 	.word	0x10210000
 8001df4:	10120000 	.word	0x10120000
 8001df8:	10110000 	.word	0x10110000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000
 8001e04:	40010800 	.word	0x40010800
 8001e08:	40010c00 	.word	0x40010c00
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	40011400 	.word	0x40011400
 8001e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e18:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	4909      	ldr	r1, [pc, #36]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	3301      	adds	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f47f ae8e 	bne.w	8001b58 <HAL_GPIO_Init+0x14>
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	372c      	adds	r7, #44	@ 0x2c
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	40010400 	.word	0x40010400

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43d9      	mvns	r1, r3
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	611a      	str	r2, [r3, #16]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e12b      	b.n	800211a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fe24 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2224      	movs	r2, #36	@ 0x24
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f14:	f001 f832 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 8001f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a81      	ldr	r2, [pc, #516]	@ (8002124 <HAL_I2C_Init+0x274>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d807      	bhi.n	8001f34 <HAL_I2C_Init+0x84>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a80      	ldr	r2, [pc, #512]	@ (8002128 <HAL_I2C_Init+0x278>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	bf94      	ite	ls
 8001f2c:	2301      	movls	r3, #1
 8001f2e:	2300      	movhi	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e006      	b.n	8001f42 <HAL_I2C_Init+0x92>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a7d      	ldr	r2, [pc, #500]	@ (800212c <HAL_I2C_Init+0x27c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	bf94      	ite	ls
 8001f3c:	2301      	movls	r3, #1
 8001f3e:	2300      	movhi	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0e7      	b.n	800211a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a78      	ldr	r2, [pc, #480]	@ (8002130 <HAL_I2C_Init+0x280>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	@ (8002124 <HAL_I2C_Init+0x274>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d802      	bhi.n	8001f84 <HAL_I2C_Init+0xd4>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3301      	adds	r3, #1
 8001f82:	e009      	b.n	8001f98 <HAL_I2C_Init+0xe8>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a69      	ldr	r2, [pc, #420]	@ (8002134 <HAL_I2C_Init+0x284>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	3301      	adds	r3, #1
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001faa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	495c      	ldr	r1, [pc, #368]	@ (8002124 <HAL_I2C_Init+0x274>)
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	d819      	bhi.n	8001fec <HAL_I2C_Init+0x13c>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e59      	subs	r1, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc6:	1c59      	adds	r1, r3, #1
 8001fc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fcc:	400b      	ands	r3, r1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_I2C_Init+0x138>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1e59      	subs	r1, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe6:	e051      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e04f      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d111      	bne.n	8002018 <HAL_I2C_Init+0x168>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1e58      	subs	r0, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	440b      	add	r3, r1
 8002002:	fbb0 f3f3 	udiv	r3, r0, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e012      	b.n	800203e <HAL_I2C_Init+0x18e>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e58      	subs	r0, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	0099      	lsls	r1, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Init+0x196>
 8002042:	2301      	movs	r3, #1
 8002044:	e022      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10e      	bne.n	800206c <HAL_I2C_Init+0x1bc>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1e58      	subs	r0, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6859      	ldr	r1, [r3, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	440b      	add	r3, r1
 800205c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800206a:	e00f      	b.n	800208c <HAL_I2C_Init+0x1dc>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e58      	subs	r0, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	0099      	lsls	r1, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002082:	3301      	adds	r3, #1
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	6809      	ldr	r1, [r1, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6911      	ldr	r1, [r2, #16]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68d2      	ldr	r2, [r2, #12]
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	000186a0 	.word	0x000186a0
 8002128:	001e847f 	.word	0x001e847f
 800212c:	003d08ff 	.word	0x003d08ff
 8002130:	431bde83 	.word	0x431bde83
 8002134:	10624dd3 	.word	0x10624dd3

08002138 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	461a      	mov	r2, r3
 8002144:	460b      	mov	r3, r1
 8002146:	817b      	strh	r3, [r7, #10]
 8002148:	4613      	mov	r3, r2
 800214a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff fbe8 	bl	8001920 <HAL_GetTick>
 8002150:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b20      	cmp	r3, #32
 800215c:	f040 80e0 	bne.w	8002320 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2319      	movs	r3, #25
 8002166:	2201      	movs	r2, #1
 8002168:	4970      	ldr	r1, [pc, #448]	@ (800232c <HAL_I2C_Master_Transmit+0x1f4>)
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f964 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	e0d3      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_I2C_Master_Transmit+0x50>
 8002184:	2302      	movs	r3, #2
 8002186:	e0cc      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d007      	beq.n	80021ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2221      	movs	r2, #33	@ 0x21
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2210      	movs	r2, #16
 80021ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	893a      	ldrh	r2, [r7, #8]
 80021de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a50      	ldr	r2, [pc, #320]	@ (8002330 <HAL_I2C_Master_Transmit+0x1f8>)
 80021ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021f0:	8979      	ldrh	r1, [r7, #10]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	6a3a      	ldr	r2, [r7, #32]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f89c 	bl	8002334 <I2C_MasterRequestWrite>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e08d      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800221c:	e066      	b.n	80022ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	6a39      	ldr	r1, [r7, #32]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fa22 	bl	800266c <I2C_WaitOnTXEFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2b04      	cmp	r3, #4
 8002234:	d107      	bne.n	8002246 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b04      	cmp	r3, #4
 8002286:	d11b      	bne.n	80022c0 <HAL_I2C_Master_Transmit+0x188>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	d017      	beq.n	80022c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	6a39      	ldr	r1, [r7, #32]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fa19 	bl	80026fc <I2C_WaitOnBTFFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00d      	beq.n	80022ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d107      	bne.n	80022e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e01a      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d194      	bne.n	800221e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	00100002 	.word	0x00100002
 8002330:	ffff0000 	.word	0xffff0000

08002334 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	460b      	mov	r3, r1
 8002342:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d006      	beq.n	800235e <I2C_MasterRequestWrite+0x2a>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d003      	beq.n	800235e <I2C_MasterRequestWrite+0x2a>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800235c:	d108      	bne.n	8002370 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e00b      	b.n	8002388 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	2b12      	cmp	r3, #18
 8002376:	d107      	bne.n	8002388 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002386:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f84f 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ae:	d103      	bne.n	80023b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e035      	b.n	8002428 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023c4:	d108      	bne.n	80023d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023c6:	897b      	ldrh	r3, [r7, #10]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023d4:	611a      	str	r2, [r3, #16]
 80023d6:	e01b      	b.n	8002410 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023d8:	897b      	ldrh	r3, [r7, #10]
 80023da:	11db      	asrs	r3, r3, #7
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0306 	and.w	r3, r3, #6
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f063 030f 	orn	r3, r3, #15
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	490e      	ldr	r1, [pc, #56]	@ (8002430 <I2C_MasterRequestWrite+0xfc>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f898 	bl	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e010      	b.n	8002428 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002406:	897b      	ldrh	r3, [r7, #10]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4907      	ldr	r1, [pc, #28]	@ (8002434 <I2C_MasterRequestWrite+0x100>)
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f888 	bl	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	00010008 	.word	0x00010008
 8002434:	00010002 	.word	0x00010002

08002438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002448:	e048      	b.n	80024dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d044      	beq.n	80024dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002452:	f7ff fa65 	bl	8001920 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d139      	bne.n	80024dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	0c1b      	lsrs	r3, r3, #16
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d10d      	bne.n	800248e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	43da      	mvns	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4013      	ands	r3, r2
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	e00c      	b.n	80024a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	43da      	mvns	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4013      	ands	r3, r2
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d116      	bne.n	80024dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e023      	b.n	8002524 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	0c1b      	lsrs	r3, r3, #16
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10d      	bne.n	8002502 <I2C_WaitOnFlagUntilTimeout+0xca>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	43da      	mvns	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	e00c      	b.n	800251c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	43da      	mvns	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4013      	ands	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	429a      	cmp	r2, r3
 8002520:	d093      	beq.n	800244a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800253a:	e071      	b.n	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800254a:	d123      	bne.n	8002594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e067      	b.n	8002664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259a:	d041      	beq.n	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259c:	f7ff f9c0 	bl	8001920 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d302      	bcc.n	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d136      	bne.n	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10c      	bne.n	80025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	e00b      	b.n	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	43da      	mvns	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	4013      	ands	r3, r2
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e021      	b.n	8002664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	0c1b      	lsrs	r3, r3, #16
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10c      	bne.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	43da      	mvns	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4013      	ands	r3, r2
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e00b      	b.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4013      	ands	r3, r2
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	f47f af6d 	bne.w	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002678:	e034      	b.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f886 	bl	800278c <I2C_IsAcknowledgeFailed>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e034      	b.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d028      	beq.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002692:	f7ff f945 	bl	8001920 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d302      	bcc.n	80026a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d11d      	bne.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b2:	2b80      	cmp	r3, #128	@ 0x80
 80026b4:	d016      	beq.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e007      	b.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ee:	2b80      	cmp	r3, #128	@ 0x80
 80026f0:	d1c3      	bne.n	800267a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002708:	e034      	b.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f83e 	bl	800278c <I2C_IsAcknowledgeFailed>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e034      	b.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d028      	beq.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002722:	f7ff f8fd 	bl	8001920 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11d      	bne.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b04      	cmp	r3, #4
 8002744:	d016      	beq.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e007      	b.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b04      	cmp	r3, #4
 8002780:	d1c3      	bne.n	800270a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027a2:	d11b      	bne.n	80027dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	f043 0204 	orr.w	r2, r3, #4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e272      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8087 	beq.w	8002916 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002808:	4b92      	ldr	r3, [pc, #584]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	2b04      	cmp	r3, #4
 8002812:	d00c      	beq.n	800282e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002814:	4b8f      	ldr	r3, [pc, #572]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b08      	cmp	r3, #8
 800281e:	d112      	bne.n	8002846 <HAL_RCC_OscConfig+0x5e>
 8002820:	4b8c      	ldr	r3, [pc, #560]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800282c:	d10b      	bne.n	8002846 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282e:	4b89      	ldr	r3, [pc, #548]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d06c      	beq.n	8002914 <HAL_RCC_OscConfig+0x12c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d168      	bne.n	8002914 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e24c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x76>
 8002850:	4b80      	ldr	r3, [pc, #512]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a7f      	ldr	r2, [pc, #508]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e02e      	b.n	80028bc <HAL_RCC_OscConfig+0xd4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x98>
 8002866:	4b7b      	ldr	r3, [pc, #492]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 800286c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b78      	ldr	r3, [pc, #480]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a77      	ldr	r2, [pc, #476]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xd4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0xbc>
 800288a:	4b72      	ldr	r3, [pc, #456]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a71      	ldr	r2, [pc, #452]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b6f      	ldr	r3, [pc, #444]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xd4>
 80028a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b68      	ldr	r3, [pc, #416]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a67      	ldr	r2, [pc, #412]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff f82c 	bl	8001920 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff f828 	bl	8001920 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e200      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b5d      	ldr	r3, [pc, #372]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xe4>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff f818 	bl	8001920 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7ff f814 	bl	8001920 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1ec      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	4b53      	ldr	r3, [pc, #332]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x10c>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d063      	beq.n	80029ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002922:	4b4c      	ldr	r3, [pc, #304]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800292e:	4b49      	ldr	r3, [pc, #292]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x18c>
 800293a:	4b46      	ldr	r3, [pc, #280]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	4b43      	ldr	r3, [pc, #268]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x176>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1c0      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4939      	ldr	r1, [pc, #228]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e03a      	b.n	80029ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b36      	ldr	r3, [pc, #216]	@ (8002a58 <HAL_RCC_OscConfig+0x270>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe ffcd 	bl	8001920 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298a:	f7fe ffc9 	bl	8001920 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1a1      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4927      	ldr	r1, [pc, #156]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b26      	ldr	r3, [pc, #152]	@ (8002a58 <HAL_RCC_OscConfig+0x270>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe ffac 	bl	8001920 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe ffa8 	bl	8001920 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e180      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d03a      	beq.n	8002a6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d019      	beq.n	8002a32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <HAL_RCC_OscConfig+0x274>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a04:	f7fe ff8c 	bl	8001920 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe ff88 	bl	8001920 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e160      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f000 faba 	bl	8002fa4 <RCC_Delay>
 8002a30:	e01c      	b.n	8002a6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_RCC_OscConfig+0x274>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a38:	f7fe ff72 	bl	8001920 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3e:	e00f      	b.n	8002a60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe ff6e 	bl	8001920 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d908      	bls.n	8002a60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e146      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	42420000 	.word	0x42420000
 8002a5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	4b92      	ldr	r3, [pc, #584]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e9      	bne.n	8002a40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a6 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10d      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4b88      	ldr	r3, [pc, #544]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	4a87      	ldr	r2, [pc, #540]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	61d3      	str	r3, [r2, #28]
 8002a96:	4b85      	ldr	r3, [pc, #532]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b82      	ldr	r3, [pc, #520]	@ (8002cb0 <HAL_RCC_OscConfig+0x4c8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d118      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8002cb0 <HAL_RCC_OscConfig+0x4c8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8002cb0 <HAL_RCC_OscConfig+0x4c8>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abe:	f7fe ff2f 	bl	8001920 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7fe ff2b 	bl	8001920 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b64      	cmp	r3, #100	@ 0x64
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e103      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	4b75      	ldr	r3, [pc, #468]	@ (8002cb0 <HAL_RCC_OscConfig+0x4c8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x312>
 8002aec:	4b6f      	ldr	r3, [pc, #444]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a6e      	ldr	r2, [pc, #440]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	e02d      	b.n	8002b56 <HAL_RCC_OscConfig+0x36e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x334>
 8002b02:	4b6a      	ldr	r3, [pc, #424]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a69      	ldr	r2, [pc, #420]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	6213      	str	r3, [r2, #32]
 8002b0e:	4b67      	ldr	r3, [pc, #412]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4a66      	ldr	r2, [pc, #408]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	6213      	str	r3, [r2, #32]
 8002b1a:	e01c      	b.n	8002b56 <HAL_RCC_OscConfig+0x36e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d10c      	bne.n	8002b3e <HAL_RCC_OscConfig+0x356>
 8002b24:	4b61      	ldr	r3, [pc, #388]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a60      	ldr	r2, [pc, #384]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	f043 0304 	orr.w	r3, r3, #4
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	4b5e      	ldr	r3, [pc, #376]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4a5d      	ldr	r2, [pc, #372]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6213      	str	r3, [r2, #32]
 8002b3c:	e00b      	b.n	8002b56 <HAL_RCC_OscConfig+0x36e>
 8002b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a5a      	ldr	r2, [pc, #360]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	6213      	str	r3, [r2, #32]
 8002b4a:	4b58      	ldr	r3, [pc, #352]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4a57      	ldr	r2, [pc, #348]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	f023 0304 	bic.w	r3, r3, #4
 8002b54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d015      	beq.n	8002b8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fedf 	bl	8001920 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fe fedb 	bl	8001920 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0b1      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ee      	beq.n	8002b66 <HAL_RCC_OscConfig+0x37e>
 8002b88:	e014      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fec9 	bl	8001920 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f7fe fec5 	bl	8001920 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e09b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba8:	4b40      	ldr	r3, [pc, #256]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ee      	bne.n	8002b92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	4b3c      	ldr	r3, [pc, #240]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	4a3b      	ldr	r2, [pc, #236]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8087 	beq.w	8002cde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd0:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d061      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d146      	bne.n	8002c72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be4:	4b33      	ldr	r3, [pc, #204]	@ (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7fe fe99 	bl	8001920 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7fe fe95 	bl	8001920 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e06d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c04:	4b29      	ldr	r3, [pc, #164]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c18:	d108      	bne.n	8002c2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c1a:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4921      	ldr	r1, [pc, #132]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a19      	ldr	r1, [r3, #32]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	491b      	ldr	r1, [pc, #108]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c44:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fe69 	bl	8001920 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe fe65 	bl	8001920 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e03d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c64:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x46a>
 8002c70:	e035      	b.n	8002cde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fe52 	bl	8001920 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fe4e 	bl	8001920 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e026      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x498>
 8002c9e:	e01e      	b.n	8002cde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e019      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <HAL_RCC_OscConfig+0x500>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d001      	beq.n	8002cde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000

08002cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0d0      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d00:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d910      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b67      	ldr	r3, [pc, #412]	@ (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 0207 	bic.w	r2, r3, #7
 8002d16:	4965      	ldr	r1, [pc, #404]	@ (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b63      	ldr	r3, [pc, #396]	@ (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0b8      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d48:	4b59      	ldr	r3, [pc, #356]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a58      	ldr	r2, [pc, #352]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d60:	4b53      	ldr	r3, [pc, #332]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a52      	ldr	r2, [pc, #328]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b50      	ldr	r3, [pc, #320]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	494d      	ldr	r1, [pc, #308]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d040      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d115      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e07f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	4b41      	ldr	r3, [pc, #260]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e073      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dba:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06b      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dca:	4b39      	ldr	r3, [pc, #228]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4936      	ldr	r1, [pc, #216]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fda0 	bl	8001920 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fe fd9c 	bl	8001920 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e053      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 020c 	and.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1eb      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b27      	ldr	r3, [pc, #156]	@ (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d210      	bcs.n	8002e3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 0207 	bic.w	r2, r3, #7
 8002e22:	4922      	ldr	r1, [pc, #136]	@ (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b20      	ldr	r3, [pc, #128]	@ (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e032      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e48:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4916      	ldr	r1, [pc, #88]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	490e      	ldr	r1, [pc, #56]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e7a:	f000 f821 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	490a      	ldr	r1, [pc, #40]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	5ccb      	ldrb	r3, [r1, r3]
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	4a09      	ldr	r2, [pc, #36]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e96:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <HAL_RCC_ClockConfig+0x1d0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fcfe 	bl	800189c <HAL_InitTick>

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40022000 	.word	0x40022000
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	08003868 	.word	0x08003868
 8002eb8:	20000014 	.word	0x20000014
 8002ebc:	20000018 	.word	0x20000018

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eda:	4b1e      	ldr	r3, [pc, #120]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x30>
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x36>
 8002eee:	e027      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef0:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ef2:	613b      	str	r3, [r7, #16]
      break;
 8002ef4:	e027      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	0c9b      	lsrs	r3, r3, #18
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	4a17      	ldr	r2, [pc, #92]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f00:	5cd3      	ldrb	r3, [r2, r3]
 8002f02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d010      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f0e:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	0c5b      	lsrs	r3, r3, #17
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	4a11      	ldr	r2, [pc, #68]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a0d      	ldr	r2, [pc, #52]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f22:	fb03 f202 	mul.w	r2, r3, r2
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	e004      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a0c      	ldr	r2, [pc, #48]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
      break;
 8002f3e:	e002      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f42:	613b      	str	r3, [r7, #16]
      break;
 8002f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f46:	693b      	ldr	r3, [r7, #16]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	007a1200 	.word	0x007a1200
 8002f5c:	08003880 	.word	0x08003880
 8002f60:	08003890 	.word	0x08003890
 8002f64:	003d0900 	.word	0x003d0900

08002f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f6c:	4b02      	ldr	r3, [pc, #8]	@ (8002f78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	20000014 	.word	0x20000014

08002f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f80:	f7ff fff2 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b05      	ldr	r3, [pc, #20]	@ (8002f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4903      	ldr	r1, [pc, #12]	@ (8002fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08003878 	.word	0x08003878

08002fa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fac:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <RCC_Delay+0x34>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fdc <RCC_Delay+0x38>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0a5b      	lsrs	r3, r3, #9
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fc0:	bf00      	nop
  }
  while (Delay --);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e5a      	subs	r2, r3, #1
 8002fc6:	60fa      	str	r2, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <RCC_Delay+0x1c>
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	20000014 	.word	0x20000014
 8002fdc:	10624dd3 	.word	0x10624dd3

08002fe0 <memset>:
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4402      	add	r2, r0
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d100      	bne.n	8002fea <memset+0xa>
 8002fe8:	4770      	bx	lr
 8002fea:	f803 1b01 	strb.w	r1, [r3], #1
 8002fee:	e7f9      	b.n	8002fe4 <memset+0x4>

08002ff0 <__libc_init_array>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	4d0c      	ldr	r5, [pc, #48]	@ (8003028 <__libc_init_array+0x38>)
 8002ff6:	4c0d      	ldr	r4, [pc, #52]	@ (800302c <__libc_init_array+0x3c>)
 8002ff8:	1b64      	subs	r4, r4, r5
 8002ffa:	10a4      	asrs	r4, r4, #2
 8002ffc:	42a6      	cmp	r6, r4
 8002ffe:	d109      	bne.n	8003014 <__libc_init_array+0x24>
 8003000:	f000 f916 	bl	8003230 <_init>
 8003004:	2600      	movs	r6, #0
 8003006:	4d0a      	ldr	r5, [pc, #40]	@ (8003030 <__libc_init_array+0x40>)
 8003008:	4c0a      	ldr	r4, [pc, #40]	@ (8003034 <__libc_init_array+0x44>)
 800300a:	1b64      	subs	r4, r4, r5
 800300c:	10a4      	asrs	r4, r4, #2
 800300e:	42a6      	cmp	r6, r4
 8003010:	d105      	bne.n	800301e <__libc_init_array+0x2e>
 8003012:	bd70      	pop	{r4, r5, r6, pc}
 8003014:	f855 3b04 	ldr.w	r3, [r5], #4
 8003018:	4798      	blx	r3
 800301a:	3601      	adds	r6, #1
 800301c:	e7ee      	b.n	8002ffc <__libc_init_array+0xc>
 800301e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003022:	4798      	blx	r3
 8003024:	3601      	adds	r6, #1
 8003026:	e7f2      	b.n	800300e <__libc_init_array+0x1e>
 8003028:	0800389c 	.word	0x0800389c
 800302c:	0800389c 	.word	0x0800389c
 8003030:	0800389c 	.word	0x0800389c
 8003034:	080038a0 	.word	0x080038a0

08003038 <ceil>:
 8003038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800303c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003040:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8003044:	2e13      	cmp	r6, #19
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	460c      	mov	r4, r1
 800304c:	4605      	mov	r5, r0
 800304e:	4680      	mov	r8, r0
 8003050:	dc2f      	bgt.n	80030b2 <ceil+0x7a>
 8003052:	2e00      	cmp	r6, #0
 8003054:	da11      	bge.n	800307a <ceil+0x42>
 8003056:	a332      	add	r3, pc, #200	@ (adr r3, 8003120 <ceil+0xe8>)
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd f886 	bl	800016c <__adddf3>
 8003060:	2200      	movs	r2, #0
 8003062:	2300      	movs	r3, #0
 8003064:	f7fd fcc8 	bl	80009f8 <__aeabi_dcmpgt>
 8003068:	b120      	cbz	r0, 8003074 <ceil+0x3c>
 800306a:	2c00      	cmp	r4, #0
 800306c:	db51      	blt.n	8003112 <ceil+0xda>
 800306e:	4325      	orrs	r5, r4
 8003070:	d153      	bne.n	800311a <ceil+0xe2>
 8003072:	462c      	mov	r4, r5
 8003074:	4623      	mov	r3, r4
 8003076:	462a      	mov	r2, r5
 8003078:	e024      	b.n	80030c4 <ceil+0x8c>
 800307a:	4f2b      	ldr	r7, [pc, #172]	@ (8003128 <ceil+0xf0>)
 800307c:	4137      	asrs	r7, r6
 800307e:	ea01 0c07 	and.w	ip, r1, r7
 8003082:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003086:	d01d      	beq.n	80030c4 <ceil+0x8c>
 8003088:	a325      	add	r3, pc, #148	@ (adr r3, 8003120 <ceil+0xe8>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f7fd f86d 	bl	800016c <__adddf3>
 8003092:	2200      	movs	r2, #0
 8003094:	2300      	movs	r3, #0
 8003096:	f7fd fcaf 	bl	80009f8 <__aeabi_dcmpgt>
 800309a:	2800      	cmp	r0, #0
 800309c:	d0ea      	beq.n	8003074 <ceil+0x3c>
 800309e:	2c00      	cmp	r4, #0
 80030a0:	bfc2      	ittt	gt
 80030a2:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80030a6:	4133      	asrgt	r3, r6
 80030a8:	18e4      	addgt	r4, r4, r3
 80030aa:	2500      	movs	r5, #0
 80030ac:	ea24 0407 	bic.w	r4, r4, r7
 80030b0:	e7e0      	b.n	8003074 <ceil+0x3c>
 80030b2:	2e33      	cmp	r6, #51	@ 0x33
 80030b4:	dd0a      	ble.n	80030cc <ceil+0x94>
 80030b6:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80030ba:	d103      	bne.n	80030c4 <ceil+0x8c>
 80030bc:	f7fd f856 	bl	800016c <__adddf3>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030cc:	f04f 3cff 	mov.w	ip, #4294967295
 80030d0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80030d4:	fa2c f707 	lsr.w	r7, ip, r7
 80030d8:	4238      	tst	r0, r7
 80030da:	d0f3      	beq.n	80030c4 <ceil+0x8c>
 80030dc:	a310      	add	r3, pc, #64	@ (adr r3, 8003120 <ceil+0xe8>)
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	f7fd f843 	bl	800016c <__adddf3>
 80030e6:	2200      	movs	r2, #0
 80030e8:	2300      	movs	r3, #0
 80030ea:	f7fd fc85 	bl	80009f8 <__aeabi_dcmpgt>
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d0c0      	beq.n	8003074 <ceil+0x3c>
 80030f2:	2c00      	cmp	r4, #0
 80030f4:	dd0a      	ble.n	800310c <ceil+0xd4>
 80030f6:	2e14      	cmp	r6, #20
 80030f8:	d101      	bne.n	80030fe <ceil+0xc6>
 80030fa:	3401      	adds	r4, #1
 80030fc:	e006      	b.n	800310c <ceil+0xd4>
 80030fe:	2301      	movs	r3, #1
 8003100:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003104:	40b3      	lsls	r3, r6
 8003106:	441d      	add	r5, r3
 8003108:	45a8      	cmp	r8, r5
 800310a:	d8f6      	bhi.n	80030fa <ceil+0xc2>
 800310c:	ea25 0507 	bic.w	r5, r5, r7
 8003110:	e7b0      	b.n	8003074 <ceil+0x3c>
 8003112:	2500      	movs	r5, #0
 8003114:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8003118:	e7ac      	b.n	8003074 <ceil+0x3c>
 800311a:	2500      	movs	r5, #0
 800311c:	4c03      	ldr	r4, [pc, #12]	@ (800312c <ceil+0xf4>)
 800311e:	e7a9      	b.n	8003074 <ceil+0x3c>
 8003120:	8800759c 	.word	0x8800759c
 8003124:	7e37e43c 	.word	0x7e37e43c
 8003128:	000fffff 	.word	0x000fffff
 800312c:	3ff00000 	.word	0x3ff00000

08003130 <floor>:
 8003130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003134:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003138:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800313c:	2e13      	cmp	r6, #19
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	460c      	mov	r4, r1
 8003144:	4605      	mov	r5, r0
 8003146:	4680      	mov	r8, r0
 8003148:	dc35      	bgt.n	80031b6 <floor+0x86>
 800314a:	2e00      	cmp	r6, #0
 800314c:	da17      	bge.n	800317e <floor+0x4e>
 800314e:	a334      	add	r3, pc, #208	@ (adr r3, 8003220 <floor+0xf0>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f7fd f80a 	bl	800016c <__adddf3>
 8003158:	2200      	movs	r2, #0
 800315a:	2300      	movs	r3, #0
 800315c:	f7fd fc4c 	bl	80009f8 <__aeabi_dcmpgt>
 8003160:	b150      	cbz	r0, 8003178 <floor+0x48>
 8003162:	2c00      	cmp	r4, #0
 8003164:	da57      	bge.n	8003216 <floor+0xe6>
 8003166:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800316a:	432c      	orrs	r4, r5
 800316c:	2500      	movs	r5, #0
 800316e:	42ac      	cmp	r4, r5
 8003170:	4c2d      	ldr	r4, [pc, #180]	@ (8003228 <floor+0xf8>)
 8003172:	bf08      	it	eq
 8003174:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8003178:	4623      	mov	r3, r4
 800317a:	462a      	mov	r2, r5
 800317c:	e024      	b.n	80031c8 <floor+0x98>
 800317e:	4f2b      	ldr	r7, [pc, #172]	@ (800322c <floor+0xfc>)
 8003180:	4137      	asrs	r7, r6
 8003182:	ea01 0c07 	and.w	ip, r1, r7
 8003186:	ea5c 0c00 	orrs.w	ip, ip, r0
 800318a:	d01d      	beq.n	80031c8 <floor+0x98>
 800318c:	a324      	add	r3, pc, #144	@ (adr r3, 8003220 <floor+0xf0>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fc ffeb 	bl	800016c <__adddf3>
 8003196:	2200      	movs	r2, #0
 8003198:	2300      	movs	r3, #0
 800319a:	f7fd fc2d 	bl	80009f8 <__aeabi_dcmpgt>
 800319e:	2800      	cmp	r0, #0
 80031a0:	d0ea      	beq.n	8003178 <floor+0x48>
 80031a2:	2c00      	cmp	r4, #0
 80031a4:	bfbe      	ittt	lt
 80031a6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80031aa:	4133      	asrlt	r3, r6
 80031ac:	18e4      	addlt	r4, r4, r3
 80031ae:	2500      	movs	r5, #0
 80031b0:	ea24 0407 	bic.w	r4, r4, r7
 80031b4:	e7e0      	b.n	8003178 <floor+0x48>
 80031b6:	2e33      	cmp	r6, #51	@ 0x33
 80031b8:	dd0a      	ble.n	80031d0 <floor+0xa0>
 80031ba:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80031be:	d103      	bne.n	80031c8 <floor+0x98>
 80031c0:	f7fc ffd4 	bl	800016c <__adddf3>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d0:	f04f 3cff 	mov.w	ip, #4294967295
 80031d4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80031d8:	fa2c f707 	lsr.w	r7, ip, r7
 80031dc:	4207      	tst	r7, r0
 80031de:	d0f3      	beq.n	80031c8 <floor+0x98>
 80031e0:	a30f      	add	r3, pc, #60	@ (adr r3, 8003220 <floor+0xf0>)
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	f7fc ffc1 	bl	800016c <__adddf3>
 80031ea:	2200      	movs	r2, #0
 80031ec:	2300      	movs	r3, #0
 80031ee:	f7fd fc03 	bl	80009f8 <__aeabi_dcmpgt>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d0c0      	beq.n	8003178 <floor+0x48>
 80031f6:	2c00      	cmp	r4, #0
 80031f8:	da0a      	bge.n	8003210 <floor+0xe0>
 80031fa:	2e14      	cmp	r6, #20
 80031fc:	d101      	bne.n	8003202 <floor+0xd2>
 80031fe:	3401      	adds	r4, #1
 8003200:	e006      	b.n	8003210 <floor+0xe0>
 8003202:	2301      	movs	r3, #1
 8003204:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003208:	40b3      	lsls	r3, r6
 800320a:	441d      	add	r5, r3
 800320c:	4545      	cmp	r5, r8
 800320e:	d3f6      	bcc.n	80031fe <floor+0xce>
 8003210:	ea25 0507 	bic.w	r5, r5, r7
 8003214:	e7b0      	b.n	8003178 <floor+0x48>
 8003216:	2500      	movs	r5, #0
 8003218:	462c      	mov	r4, r5
 800321a:	e7ad      	b.n	8003178 <floor+0x48>
 800321c:	f3af 8000 	nop.w
 8003220:	8800759c 	.word	0x8800759c
 8003224:	7e37e43c 	.word	0x7e37e43c
 8003228:	bff00000 	.word	0xbff00000
 800322c:	000fffff 	.word	0x000fffff

08003230 <_init>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	bf00      	nop
 8003234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003236:	bc08      	pop	{r3}
 8003238:	469e      	mov	lr, r3
 800323a:	4770      	bx	lr

0800323c <_fini>:
 800323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323e:	bf00      	nop
 8003240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003242:	bc08      	pop	{r3}
 8003244:	469e      	mov	lr, r3
 8003246:	4770      	bx	lr
