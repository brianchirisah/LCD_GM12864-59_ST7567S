
GM1286459N_LCD_Driver_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003170  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08003280  08003280  00004280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038cc  080038cc  00005020  2**0
                  CONTENTS
  4 .ARM          00000008  080038cc  080038cc  000048cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038d4  080038d4  00005020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d4  080038d4  000048d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080038dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000020  080038fc  00005020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080038fc  0000509c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006526  00000000  00000000  00005049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000151a  00000000  00000000  0000b56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058b  00000000  00000000  0000d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016db8  00000000  00000000  0000d733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b38  00000000  00000000  000244eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082885  00000000  00000000  0002e023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b08a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e4c  00000000  00000000  000b08ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000b2738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08003268 	.word	0x08003268

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08003268 	.word	0x08003268

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_GPIO_Init+0x74>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2120      	movs	r1, #32
 8000a94:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000a96:	f001 f9f5 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000ab2:	f001 f863 	bl	8001b7c <HAL_GPIO_Init>

}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ace:	4a13      	ldr	r2, [pc, #76]	@ (8000b1c <MX_I2C1_Init+0x54>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_I2C1_Init+0x58>)
 8000ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ae6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000b06:	f001 f9ef 	bl	8001ee8 <HAL_I2C_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f000 fe39 	bl	8001786 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000003c 	.word	0x2000003c
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb4 <HAL_I2C_MspInit+0x90>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d132      	bne.n	8000baa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b62:	2312      	movs	r3, #18
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <HAL_I2C_MspInit+0x98>)
 8000b72:	f001 f803 	bl	8001b7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_I2C_MspInit+0x9c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc0 <HAL_I2C_MspInit+0x9c>)
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_I2C_MspInit+0x94>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010c00 	.word	0x40010c00
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <draw_pixel>:
 * @param  Length in pixels (max 132pixels)
 * @param  x-coordinate in pixels (max-132pixels) left end
 * @param  y-coordinate in pixels (max-64pixels) left end
 */

void draw_pixel(double x_coordinate, double y_coordinate){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000bce:	e9c7 2300 	strd	r2, r3, [r7]

	double page = floor(y_coordinate/8);
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd4 <draw_pixel+0x110>)
 8000bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bdc:	f7ff fda6 	bl	800072c <__aeabi_ddiv>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4610      	mov	r0, r2
 8000be6:	4619      	mov	r1, r3
 8000be8:	f002 fabe 	bl	8003168 <floor>
 8000bec:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint8_t pixel_draw[2] = {0x40, 0x80};
 8000bf0:	f248 0340 	movw	r3, #32832	@ 0x8040
 8000bf4:	82bb      	strh	r3, [r7, #20]
	dot_pattern = 0b00000001 << ((uint8_t) y_coordinate % 8);
 8000bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bfa:	f7ff ff07 	bl	8000a0c <__aeabi_d2uiz>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	2201      	movs	r2, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b32      	ldr	r3, [pc, #200]	@ (8000cd8 <draw_pixel+0x114>)
 8000c10:	701a      	strb	r2, [r3, #0]
	pixel_draw[1]=dot_pattern;
 8000c12:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <draw_pixel+0x114>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	757b      	strb	r3, [r7, #21]
	// Extracting 4 MSBs then bitwise OR with '0b0001 0000'
	Col_addr_MSB[1]= (((uint8_t)x_coordinate >> 4) | 0x10);
 8000c18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c1c:	f7ff fef6 	bl	8000a0c <__aeabi_d2uiz>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <draw_pixel+0x118>)
 8000c30:	705a      	strb	r2, [r3, #1]
	// Extracting 4 LSBs by bitwise ANDing with '0b0000 1111'
	Col_addr_LSB[1] = ((uint8_t)x_coordinate & 0x0F);
 8000c32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c36:	f7ff fee9 	bl	8000a0c <__aeabi_d2uiz>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <draw_pixel+0x11c>)
 8000c46:	705a      	strb	r2, [r3, #1]
	Page_addr[1] = (0xB0 + page);
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ce4 <draw_pixel+0x120>)
 8000c4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c52:	f7ff fa8b 	bl	800016c <__adddf3>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f7ff fed5 	bl	8000a0c <__aeabi_d2uiz>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <draw_pixel+0x124>)
 8000c68:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Page_addr, 2, Timeout); // Set Page Address (Row Address)
 8000c6a:	233f      	movs	r3, #63	@ 0x3f
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	b299      	uxth	r1, r3
 8000c70:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <draw_pixel+0x128>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2302      	movs	r3, #2
 8000c78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <draw_pixel+0x124>)
 8000c7a:	481d      	ldr	r0, [pc, #116]	@ (8000cf0 <draw_pixel+0x12c>)
 8000c7c:	f001 fa78 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, 2, Timeout); // Set Column Most significant Byte Address
 8000c80:	233f      	movs	r3, #63	@ 0x3f
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	b299      	uxth	r1, r3
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <draw_pixel+0x128>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	4a13      	ldr	r2, [pc, #76]	@ (8000cdc <draw_pixel+0x118>)
 8000c90:	4817      	ldr	r0, [pc, #92]	@ (8000cf0 <draw_pixel+0x12c>)
 8000c92:	f001 fa6d 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, 2, Timeout); // // Set Column Least significant Byte Address
 8000c96:	233f      	movs	r3, #63	@ 0x3f
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <draw_pixel+0x128>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <draw_pixel+0x11c>)
 8000ca6:	4812      	ldr	r0, [pc, #72]	@ (8000cf0 <draw_pixel+0x12c>)
 8000ca8:	f001 fa62 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), pixel_draw, 2, Timeout);
 8000cac:	233f      	movs	r3, #63	@ 0x3f
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	b299      	uxth	r1, r3
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <draw_pixel+0x128>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f107 0214 	add.w	r2, r7, #20
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <draw_pixel+0x12c>)
 8000cc0:	f001 fa56 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 fe51 	bl	800196c <HAL_Delay>
}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40200000 	.word	0x40200000
 8000cd8:	20000092 	.word	0x20000092
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000090 	.word	0x20000090
 8000ce4:	40660000 	.word	0x40660000
 8000ce8:	20000004 	.word	0x20000004
 8000cec:	2000000c 	.word	0x2000000c
 8000cf0:	2000003c 	.word	0x2000003c

08000cf4 <Draw_Circle>:
 * @param  Height in pixels (2-132pixels)
 * @param  top left corner x and y coordinate array
 * @param  filling (1 = on , 0 = Off)
 * */

void Draw_Circle(int16_t x_center, int16_t y_center, int16_t radius, uint16_t fill) {
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	4611      	mov	r1, r2
 8000d00:	461a      	mov	r2, r3
 8000d02:	4623      	mov	r3, r4
 8000d04:	80fb      	strh	r3, [r7, #6]
 8000d06:	4603      	mov	r3, r0
 8000d08:	80bb      	strh	r3, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	807b      	strh	r3, [r7, #2]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8000d12:	2300      	movs	r3, #0
 8000d14:	81fb      	strh	r3, [r7, #14]
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - 2 * radius;
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	f1c3 0303 	rsb	r3, r3, #3
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	817b      	strh	r3, [r7, #10]
	volatile static uint16_t track=0;
	while (y >= x) {
 8000d28:	e0ea      	b.n	8000f00 <Draw_Circle+0x20c>
		draw_pixel(x_center + x, y_center + y);
 8000d2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d32:	4413      	add	r3, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb65 	bl	8000404 <__aeabi_i2d>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	460d      	mov	r5, r1
 8000d3e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fb5b 	bl	8000404 <__aeabi_i2d>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4620      	mov	r0, r4
 8000d54:	4629      	mov	r1, r5
 8000d56:	f7ff ff35 	bl	8000bc4 <draw_pixel>
		draw_pixel(x_center - x, y_center + y);
 8000d5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb4d 	bl	8000404 <__aeabi_i2d>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	460d      	mov	r5, r1
 8000d6e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fb43 	bl	8000404 <__aeabi_i2d>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4620      	mov	r0, r4
 8000d84:	4629      	mov	r1, r5
 8000d86:	f7ff ff1d 	bl	8000bc4 <draw_pixel>
		draw_pixel(x_center + x, y_center - y);
 8000d8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d92:	4413      	add	r3, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fb35 	bl	8000404 <__aeabi_i2d>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	460d      	mov	r5, r1
 8000d9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000da2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fb2b 	bl	8000404 <__aeabi_i2d>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4620      	mov	r0, r4
 8000db4:	4629      	mov	r1, r5
 8000db6:	f7ff ff05 	bl	8000bc4 <draw_pixel>
		draw_pixel(x_center - x, y_center - y);
 8000dba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fb1d 	bl	8000404 <__aeabi_i2d>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	460d      	mov	r5, r1
 8000dce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000dd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb13 	bl	8000404 <__aeabi_i2d>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4620      	mov	r0, r4
 8000de4:	4629      	mov	r1, r5
 8000de6:	f7ff feed 	bl	8000bc4 <draw_pixel>
		draw_pixel(x_center + y, y_center + x);
 8000dea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fb05 	bl	8000404 <__aeabi_i2d>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	460d      	mov	r5, r1
 8000dfe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e06:	4413      	add	r3, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fafb 	bl	8000404 <__aeabi_i2d>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4620      	mov	r0, r4
 8000e14:	4629      	mov	r1, r5
 8000e16:	f7ff fed5 	bl	8000bc4 <draw_pixel>
		draw_pixel(x_center - y, y_center + x);
 8000e1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff faed 	bl	8000404 <__aeabi_i2d>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	460d      	mov	r5, r1
 8000e2e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e36:	4413      	add	r3, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fae3 	bl	8000404 <__aeabi_i2d>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4620      	mov	r0, r4
 8000e44:	4629      	mov	r1, r5
 8000e46:	f7ff febd 	bl	8000bc4 <draw_pixel>
		draw_pixel(x_center + y, y_center - x);
 8000e4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fad5 	bl	8000404 <__aeabi_i2d>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	460d      	mov	r5, r1
 8000e5e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff facb 	bl	8000404 <__aeabi_i2d>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4620      	mov	r0, r4
 8000e74:	4629      	mov	r1, r5
 8000e76:	f7ff fea5 	bl	8000bc4 <draw_pixel>
		draw_pixel(x_center - y, y_center - x);
 8000e7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fabd 	bl	8000404 <__aeabi_i2d>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	460d      	mov	r5, r1
 8000e8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fab3 	bl	8000404 <__aeabi_i2d>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	4629      	mov	r1, r5
 8000ea6:	f7ff fe8d 	bl	8000bc4 <draw_pixel>
		x++;
 8000eaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	81fb      	strh	r3, [r7, #14]
		track = x;
 8000eb6:	89fa      	ldrh	r2, [r7, #14]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <Draw_Circle+0x230>)
 8000eba:	801a      	strh	r2, [r3, #0]
		if (d > 0) {
 8000ebc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd14      	ble.n	8000eee <Draw_Circle+0x1fa>
			y--;
 8000ec4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	81bb      	strh	r3, [r7, #12]
			d = d + 4 * (x - y) + 10;
 8000ed0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ed4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	897b      	ldrh	r3, [r7, #10]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	330a      	adds	r3, #10
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	817b      	strh	r3, [r7, #10]
 8000eec:	e008      	b.n	8000f00 <Draw_Circle+0x20c>
		} else {
			d = d + 4 * x + 6;
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	897b      	ldrh	r3, [r7, #10]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3306      	adds	r3, #6
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	817b      	strh	r3, [r7, #10]
	while (y >= x) {
 8000f00:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f6bf af0e 	bge.w	8000d2a <Draw_Circle+0x36>
		}
	}
	track++;
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <Draw_Circle+0x230>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	3301      	adds	r3, #1
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b02      	ldr	r3, [pc, #8]	@ (8000f24 <Draw_Circle+0x230>)
 8000f1a:	801a      	strh	r2, [r3, #0]

}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bdb0      	pop	{r4, r5, r7, pc}
 8000f24:	20000094 	.word	0x20000094

08000f28 <multi_line_text>:
 * @param  The text to write to the LCD surrounded by ""
 * @param  Font position in the array (0-indexed)
 * @param  Text inversion (1 = on , 0 = Off)
 */

void multi_line_text(double start_page, const char string_in[], uint8_t font_name, uint8_t inversion) {
 8000f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f2c:	b095      	sub	sp, #84	@ 0x54
 8000f2e:	af02      	add	r7, sp, #8
 8000f30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	70fb      	strb	r3, [r7, #3]
 8000f38:	466b      	mov	r3, sp
 8000f3a:	461e      	mov	r6, r3
	double max_char_per_row;
	double pages_needed;
	const uint8_t LCD_pixels_width = 132;
 8000f3c:	2384      	movs	r3, #132	@ 0x84
 8000f3e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	const double LCD_pages = 8;
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4ba3      	ldr	r3, [pc, #652]	@ (80011d4 <multi_line_text+0x2ac>)
 8000f48:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	uint8_t char_width = font_properties[font_name][0];
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	4aa2      	ldr	r2, [pc, #648]	@ (80011d8 <multi_line_text+0x2b0>)
 8000f50:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000f54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t font_offset= font_properties[font_name][1];
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	4a9f      	ldr	r2, [pc, #636]	@ (80011d8 <multi_line_text+0x2b0>)
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t input_pos = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t char_hex_array[char_width + 1];
 8000f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f70:	1c59      	adds	r1, r3, #1
 8000f72:	1e4b      	subs	r3, r1, #1
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f76:	460a      	mov	r2, r1
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4690      	mov	r8, r2
 8000f7c:	4699      	mov	r9, r3
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f92:	460a      	mov	r2, r1
 8000f94:	2300      	movs	r3, #0
 8000f96:	4614      	mov	r4, r2
 8000f98:	461d      	mov	r5, r3
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	00eb      	lsls	r3, r5, #3
 8000fa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000fa8:	00e2      	lsls	r2, r4, #3
 8000faa:	460b      	mov	r3, r1
 8000fac:	3307      	adds	r3, #7
 8000fae:	08db      	lsrs	r3, r3, #3
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	ebad 0d03 	sub.w	sp, sp, r3
 8000fb6:	ab02      	add	r3, sp, #8
 8000fb8:	3300      	adds	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t input_char;
	uint8_t pages_avail;
	uint8_t max_input_len;
	uint8_t Send_size;
	uint8_t page_counter=1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t input_len = strlen(string_in);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff f8c4 	bl	8000150 <strlen>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint16_t hex_font_pos;
	// calculate how many characters will fit on a single row (max_char_per_row)
	max_char_per_row = 132 / char_width;
 8000fce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fd2:	2284      	movs	r2, #132	@ 0x84
 8000fd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa13 	bl	8000404 <__aeabi_i2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	// calculate how many characters will fit on the screen (max_input_len)
	max_input_len = (9 - start_page) * max_char_per_row;
 8000fe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	497b      	ldr	r1, [pc, #492]	@ (80011dc <multi_line_text+0x2b4>)
 8000ff0:	f7ff f8ba 	bl	8000168 <__aeabi_dsub>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001000:	f7ff fa6a 	bl	80004d8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fcfe 	bl	8000a0c <__aeabi_d2uiz>
 8001010:	4603      	mov	r3, r0
 8001012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	//max usable pages calculation
	Send_size = (char_width + 1);
 8001016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800101a:	3301      	adds	r3, #1
 800101c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	char_hex_array[0] = data_prefix;
 8001020:	4b6f      	ldr	r3, [pc, #444]	@ (80011e0 <multi_line_text+0x2b8>)
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001026:	701a      	strb	r2, [r3, #0]
	if (input_len > max_input_len) {
 8001028:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800102c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001030:	429a      	cmp	r2, r3
 8001032:	f200 8158 	bhi.w	80012e6 <multi_line_text+0x3be>

		//Error
		return;
	}
	// if input_len <= max_input_len : execute code, else print error text
	pages_needed = ceil(input_len / max_char_per_row);
 8001036:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f9e2 	bl	8000404 <__aeabi_i2d>
 8001040:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001044:	f7ff fb72 	bl	800072c <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f002 f80e 	bl	8003070 <ceil>
 8001054:	e9c7 0106 	strd	r0, r1, [r7, #24]
	pages_avail = (LCD_pages - (start_page-1));
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b61      	ldr	r3, [pc, #388]	@ (80011e4 <multi_line_text+0x2bc>)
 800105e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001062:	f7ff f881 	bl	8000168 <__aeabi_dsub>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800106e:	f7ff f87b 	bl	8000168 <__aeabi_dsub>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fcc7 	bl	8000a0c <__aeabi_d2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	75fb      	strb	r3, [r7, #23]
	if ( pages_avail < pages_needed) {
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f9bd 	bl	8000404 <__aeabi_i2d>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001092:	f7ff fcb1 	bl	80009f8 <__aeabi_dcmpgt>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	f040 8121 	bne.w	80012e0 <multi_line_text+0x3b8>
		// Error
		return;
	}

	for (uint8_t page = start_page; page < (pages_needed+start_page); page++) {
 800109e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a2:	f7ff fcb3 	bl	8000a0c <__aeabi_d2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80010ac:	e0ff      	b.n	80012ae <multi_line_text+0x386>
		Page_addr[1] = (0xAF + page);
 80010ae:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80010b2:	3b51      	subs	r3, #81	@ 0x51
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b4c      	ldr	r3, [pc, #304]	@ (80011e8 <multi_line_text+0x2c0>)
 80010b8:	705a      	strb	r2, [r3, #1]

		transmit(Page_addr, 2);
 80010ba:	233f      	movs	r3, #63	@ 0x3f
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	b299      	uxth	r1, r3
 80010c0:	4b4a      	ldr	r3, [pc, #296]	@ (80011ec <multi_line_text+0x2c4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2302      	movs	r3, #2
 80010c8:	4a47      	ldr	r2, [pc, #284]	@ (80011e8 <multi_line_text+0x2c0>)
 80010ca:	4849      	ldr	r0, [pc, #292]	@ (80011f0 <multi_line_text+0x2c8>)
 80010cc:	f001 f850 	bl	8002170 <HAL_I2C_Master_Transmit>
		transmit(Col_addr_MSB, 2);
 80010d0:	233f      	movs	r3, #63	@ 0x3f
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b299      	uxth	r1, r3
 80010d6:	4b45      	ldr	r3, [pc, #276]	@ (80011ec <multi_line_text+0x2c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2302      	movs	r3, #2
 80010de:	4a45      	ldr	r2, [pc, #276]	@ (80011f4 <multi_line_text+0x2cc>)
 80010e0:	4843      	ldr	r0, [pc, #268]	@ (80011f0 <multi_line_text+0x2c8>)
 80010e2:	f001 f845 	bl	8002170 <HAL_I2C_Master_Transmit>
		transmit(Col_addr_LSB, 2);
 80010e6:	233f      	movs	r3, #63	@ 0x3f
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	b299      	uxth	r1, r3
 80010ec:	4b3f      	ldr	r3, [pc, #252]	@ (80011ec <multi_line_text+0x2c4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2302      	movs	r3, #2
 80010f4:	4a40      	ldr	r2, [pc, #256]	@ (80011f8 <multi_line_text+0x2d0>)
 80010f6:	483e      	ldr	r0, [pc, #248]	@ (80011f0 <multi_line_text+0x2c8>)
 80010f8:	f001 f83a 	bl	8002170 <HAL_I2C_Master_Transmit>
		//HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Page_addr, 2, Timeout); // Set Page Address (Row Address)
		//HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, 2, Timeout); // Set Column Most significant Byte Address
		//HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, 2, Timeout); // // Set Column Least significant Byte Address
		if (page >start_page) {
 80010fc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f97f 	bl	8000404 <__aeabi_i2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800110e:	f7ff fc55 	bl	80009bc <__aeabi_dcmplt>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01f      	beq.n	8001158 <multi_line_text+0x230>
			input_pos=max_char_per_row;
 8001118:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800111c:	f7ff fc76 	bl	8000a0c <__aeabi_d2uiz>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			page_counter++;
 8001126:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800112a:	3301      	adds	r3, #1
 800112c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			max_char_per_row = max_char_per_row + (LCD_pixels_width/char_width);
 8001130:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001134:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f960 	bl	8000404 <__aeabi_i2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800114c:	f7ff f80e 	bl	800016c <__adddf3>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		}
		for (uint8_t line_pos = input_pos; line_pos < max_char_per_row; line_pos++) {
 8001158:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800115c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8001160:	e091      	b.n	8001286 <multi_line_text+0x35e>
			input_char = string_in[line_pos];
 8001162:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	75bb      	strb	r3, [r7, #22]
			hex_font_pos = (char_width * (input_char - font_offset));
 800116e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001172:	b29b      	uxth	r3, r3
 8001174:	7db9      	ldrb	r1, [r7, #22]
 8001176:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800117a:	1a8a      	subs	r2, r1, r2
 800117c:	b292      	uxth	r2, r2
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	82bb      	strh	r3, [r7, #20]
			if (input_len <= 0) return;
 8001184:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80ab 	beq.w	80012e4 <multi_line_text+0x3bc>

			for (uint8_t x = line_pos; x < line_pos + char_width; x++) {
 800118e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001192:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8001196:	e055      	b.n	8001244 <multi_line_text+0x31c>
				for (uint8_t char_hex = 0; char_hex < char_width ; char_hex++) { //Sequentially saves the contents of the char_hex_array to the LCD
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800119e:	e046      	b.n	800122e <multi_line_text+0x306>
					if (inversion==1){
 80011a0:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d12b      	bne.n	8001200 <multi_line_text+0x2d8>
						char_hex_array[char_hex + 1] = ~LCDFonts[font_name][hex_font_pos + char_hex];
 80011a8:	78fa      	ldrb	r2, [r7, #3]
 80011aa:	8ab9      	ldrh	r1, [r7, #20]
 80011ac:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80011b0:	4419      	add	r1, r3
 80011b2:	4812      	ldr	r0, [pc, #72]	@ (80011fc <multi_line_text+0x2d4>)
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	4403      	add	r3, r0
 80011be:	440b      	add	r3, r1
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80011c6:	3301      	adds	r3, #1
 80011c8:	43d2      	mvns	r2, r2
 80011ca:	b2d1      	uxtb	r1, r2
 80011cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ce:	54d1      	strb	r1, [r2, r3]
						continue;
 80011d0:	e028      	b.n	8001224 <multi_line_text+0x2fc>
 80011d2:	bf00      	nop
 80011d4:	40200000 	.word	0x40200000
 80011d8:	20000000 	.word	0x20000000
 80011dc:	40220000 	.word	0x40220000
 80011e0:	20000010 	.word	0x20000010
 80011e4:	3ff00000 	.word	0x3ff00000
 80011e8:	20000004 	.word	0x20000004
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	2000003c 	.word	0x2000003c
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000090 	.word	0x20000090
 80011fc:	080032a0 	.word	0x080032a0
					}
					char_hex_array[char_hex + 1] = LCDFonts[font_name][hex_font_pos + char_hex];
 8001200:	78fa      	ldrb	r2, [r7, #3]
 8001202:	8ab9      	ldrh	r1, [r7, #20]
 8001204:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001208:	18c8      	adds	r0, r1, r3
 800120a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800120e:	1c59      	adds	r1, r3, #1
 8001210:	4c37      	ldr	r4, [pc, #220]	@ (80012f0 <multi_line_text+0x3c8>)
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	4423      	add	r3, r4
 800121c:	4403      	add	r3, r0
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	545a      	strb	r2, [r3, r1]
				for (uint8_t char_hex = 0; char_hex < char_width ; char_hex++) { //Sequentially saves the contents of the char_hex_array to the LCD
 8001224:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001228:	3301      	adds	r3, #1
 800122a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800122e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001232:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001236:	429a      	cmp	r2, r3
 8001238:	d3b2      	bcc.n	80011a0 <multi_line_text+0x278>
			for (uint8_t x = line_pos; x < line_pos + char_width; x++) {
 800123a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800123e:	3301      	adds	r3, #1
 8001240:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8001244:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001248:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 800124c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001250:	440b      	add	r3, r1
 8001252:	429a      	cmp	r2, r3
 8001254:	dba0      	blt.n	8001198 <multi_line_text+0x270>
					//HAL_Delay(1);
				}
			}

			transmit(char_hex_array, Send_size);
 8001256:	233f      	movs	r3, #63	@ 0x3f
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	b299      	uxth	r1, r3
 800125c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <multi_line_text+0x3cc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	4613      	mov	r3, r2
 800126a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800126c:	4822      	ldr	r0, [pc, #136]	@ (80012f8 <multi_line_text+0x3d0>)
 800126e:	f000 ff7f 	bl	8002170 <HAL_I2C_Master_Transmit>
			//HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1),char_hex_array, Send_size, Timeout);
			//HAL_Delay(25);
			input_len--;
 8001272:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001276:	3b01      	subs	r3, #1
 8001278:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		for (uint8_t line_pos = input_pos; line_pos < max_char_per_row; line_pos++) {
 800127c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001280:	3301      	adds	r3, #1
 8001282:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8001286:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f8ba 	bl	8000404 <__aeabi_i2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001298:	f7ff fbae 	bl	80009f8 <__aeabi_dcmpgt>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f47f af5f 	bne.w	8001162 <multi_line_text+0x23a>
	for (uint8_t page = start_page; page < (pages_needed+start_page); page++) {
 80012a4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80012a8:	3301      	adds	r3, #1
 80012aa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80012ae:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f8a6 	bl	8000404 <__aeabi_i2d>
 80012b8:	4604      	mov	r4, r0
 80012ba:	460d      	mov	r5, r1
 80012bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012c4:	f7fe ff52 	bl	800016c <__adddf3>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff fb74 	bl	80009bc <__aeabi_dcmplt>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f47f aee9 	bne.w	80010ae <multi_line_text+0x186>
 80012dc:	46b5      	mov	sp, r6
 80012de:	e003      	b.n	80012e8 <multi_line_text+0x3c0>
		return;
 80012e0:	bf00      	nop
 80012e2:	e000      	b.n	80012e6 <multi_line_text+0x3be>
			if (input_len <= 0) return;
 80012e4:	bf00      	nop
		return;
 80012e6:	46b5      	mov	sp, r6
		}
	}
}
 80012e8:	374c      	adds	r7, #76	@ 0x4c
 80012ea:	46bd      	mov	sp, r7
 80012ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012f0:	080032a0 	.word	0x080032a0
 80012f4:	2000000c 	.word	0x2000000c
 80012f8:	2000003c 	.word	0x2000003c

080012fc <reset_cursor>:

// ===================================================================================================================================
//  # This function will set the cursor position to the top left corner (Page 0, Column 0) #
// ===================================================================================================================================

void reset_cursor(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af02      	add	r7, sp, #8
	Page_addr[1] = 0xB0;
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <reset_cursor+0x60>)
 8001304:	22b0      	movs	r2, #176	@ 0xb0
 8001306:	705a      	strb	r2, [r3, #1]
	Col_addr_MSB[1] = 0x10;
 8001308:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <reset_cursor+0x64>)
 800130a:	2210      	movs	r2, #16
 800130c:	705a      	strb	r2, [r3, #1]
	Col_addr_LSB[1] = 0x00;
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <reset_cursor+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Page_addr, 2, Timeout); // Set Page Address (Row Address)
 8001314:	233f      	movs	r3, #63	@ 0x3f
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	b299      	uxth	r1, r3
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <reset_cursor+0x6c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2302      	movs	r3, #2
 8001322:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <reset_cursor+0x60>)
 8001324:	4811      	ldr	r0, [pc, #68]	@ (800136c <reset_cursor+0x70>)
 8001326:	f000 ff23 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, 2,Timeout); // Set Column Most significant Byte Address
 800132a:	233f      	movs	r3, #63	@ 0x3f
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	b299      	uxth	r1, r3
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <reset_cursor+0x6c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2302      	movs	r3, #2
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <reset_cursor+0x64>)
 800133a:	480c      	ldr	r0, [pc, #48]	@ (800136c <reset_cursor+0x70>)
 800133c:	f000 ff18 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, 2,Timeout); // // Set Column Least significant Byte Address
 8001340:	233f      	movs	r3, #63	@ 0x3f
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	b299      	uxth	r1, r3
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <reset_cursor+0x6c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2302      	movs	r3, #2
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <reset_cursor+0x68>)
 8001350:	4806      	ldr	r0, [pc, #24]	@ (800136c <reset_cursor+0x70>)
 8001352:	f000 ff0d 	bl	8002170 <HAL_I2C_Master_Transmit>
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000004 	.word	0x20000004
 8001360:	20000008 	.word	0x20000008
 8001364:	20000090 	.word	0x20000090
 8001368:	2000000c 	.word	0x2000000c
 800136c:	2000003c 	.word	0x2000003c

08001370 <clear_screen>:

// ===================================================================================================================================
//  # This function will clear the screen by writing 0x00 on every line , from left to right,top to bottom #
// ===================================================================================================================================

void clear_screen(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af02      	add	r7, sp, #8

	uint8_t Blank_line_data[2]  = { 0x40, 0x00 };
 8001376:	2340      	movs	r3, #64	@ 0x40
 8001378:	80bb      	strh	r3, [r7, #4]

	for (uint8_t c = 0; c < 8; c++) { // sending to 8 rows (pages) (DDRAM), each row is 1 Byte (8 Bits high)
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	e03c      	b.n	80013fa <clear_screen+0x8a>
		Page_addr[1] = (0xB0+c);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	3b50      	subs	r3, #80	@ 0x50
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <clear_screen+0x9c>)
 8001388:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Page_addr, 2, Timeout); // Set Page Address (Row Address)
 800138a:	233f      	movs	r3, #63	@ 0x3f
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	b299      	uxth	r1, r3
 8001390:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <clear_screen+0xa0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2302      	movs	r3, #2
 8001398:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <clear_screen+0x9c>)
 800139a:	481e      	ldr	r0, [pc, #120]	@ (8001414 <clear_screen+0xa4>)
 800139c:	f000 fee8 	bl	8002170 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, 2,Timeout); // Set Column Most significant Byte Address
 80013a0:	233f      	movs	r3, #63	@ 0x3f
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	b299      	uxth	r1, r3
 80013a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <clear_screen+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2302      	movs	r3, #2
 80013ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001418 <clear_screen+0xa8>)
 80013b0:	4818      	ldr	r0, [pc, #96]	@ (8001414 <clear_screen+0xa4>)
 80013b2:	f000 fedd 	bl	8002170 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, 2,Timeout); // // Set Column Least significant Byte Address
 80013b6:	233f      	movs	r3, #63	@ 0x3f
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	b299      	uxth	r1, r3
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <clear_screen+0xa0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2302      	movs	r3, #2
 80013c4:	4a15      	ldr	r2, [pc, #84]	@ (800141c <clear_screen+0xac>)
 80013c6:	4813      	ldr	r0, [pc, #76]	@ (8001414 <clear_screen+0xa4>)
 80013c8:	f000 fed2 	bl	8002170 <HAL_I2C_Master_Transmit>
		for (uint8_t d = 0; d < 131; d++) { // sending to 132 columns (DDRAM), 1 byte at a time
 80013cc:	2300      	movs	r3, #0
 80013ce:	71bb      	strb	r3, [r7, #6]
 80013d0:	e00d      	b.n	80013ee <clear_screen+0x7e>
			HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Blank_line_data, // Send data prefixed by 0x40 (ST7567S Manual page
 80013d2:	233f      	movs	r3, #63	@ 0x3f
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	b299      	uxth	r1, r3
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <clear_screen+0xa0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	1d3a      	adds	r2, r7, #4
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2302      	movs	r3, #2
 80013e2:	480c      	ldr	r0, [pc, #48]	@ (8001414 <clear_screen+0xa4>)
 80013e4:	f000 fec4 	bl	8002170 <HAL_I2C_Master_Transmit>
		for (uint8_t d = 0; d < 131; d++) { // sending to 132 columns (DDRAM), 1 byte at a time
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	3301      	adds	r3, #1
 80013ec:	71bb      	strb	r3, [r7, #6]
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	2b82      	cmp	r3, #130	@ 0x82
 80013f2:	d9ee      	bls.n	80013d2 <clear_screen+0x62>
	for (uint8_t c = 0; c < 8; c++) { // sending to 8 rows (pages) (DDRAM), each row is 1 Byte (8 Bits high)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	3301      	adds	r3, #1
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	d9bf      	bls.n	8001380 <clear_screen+0x10>
					2, Timeout);
			//HAL_Delay(5); // This line can be un_commented to activate and / or adjust delay to slow down the execution
		}
	}
	reset_cursor();
 8001400:	f7ff ff7c 	bl	80012fc <reset_cursor>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000004 	.word	0x20000004
 8001410:	2000000c 	.word	0x2000000c
 8001414:	2000003c 	.word	0x2000003c
 8001418:	20000008 	.word	0x20000008
 800141c:	20000090 	.word	0x20000090

08001420 <LCD_Init>:
}

// ===================================================================================================================================
//  # This function will clear the screen by writing 0x00 on every line , from left to right,top to bottom #
// ===================================================================================================================================
void LCD_Init() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	@ 0x38
 8001424:	af02      	add	r7, sp, #8

	uint8_t Restart[2] 				= { 0x00, 0xE2 };
 8001426:	f44f 4362 	mov.w	r3, #57856	@ 0xe200
 800142a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint8_t Bias_select[2] 			= { 0x00, 0xA2 };
 800142c:	f44f 4322 	mov.w	r3, #41472	@ 0xa200
 8001430:	853b      	strh	r3, [r7, #40]	@ 0x28
	uint8_t SEG_direction[2] 		= { 0x00, 0xA0 };
 8001432:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001436:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint8_t COM_direction[2] 		= { 0x00, 0xC8 };
 8001438:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 800143c:	843b      	strh	r3, [r7, #32]
	uint8_t Regulation_ratio[2]		= { 0x00, 0x25 };
 800143e:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8001442:	83bb      	strh	r3, [r7, #28]
	uint8_t Set_EV_com[2] 			= { 0x00, 0x81 };
 8001444:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001448:	833b      	strh	r3, [r7, #24]
	uint8_t Set_EV[2] 				= { 0x00, 0x20 };
 800144a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144e:	82bb      	strh	r3, [r7, #20]
	uint8_t Booster[2] 				= { 0x00, 0x2C };
 8001450:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001454:	823b      	strh	r3, [r7, #16]
	uint8_t Regulator[2] 			= { 0x00, 0x2E };
 8001456:	f44f 5338 	mov.w	r3, #11776	@ 0x2e00
 800145a:	81bb      	strh	r3, [r7, #12]
	uint8_t Follower[2] 			= { 0x00, 0x2F };
 800145c:	f44f 533c 	mov.w	r3, #12032	@ 0x2f00
 8001460:	813b      	strh	r3, [r7, #8]
	uint8_t Display_ON[2] 			= { 0x00, 0xAF };
 8001462:	f44f 432f 	mov.w	r3, #44800	@ 0xaf00
 8001466:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Restart, Data_size, Timeout);
 8001468:	233f      	movs	r3, #63	@ 0x3f
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	b299      	uxth	r1, r3
 800146e:	4b5c      	ldr	r3, [pc, #368]	@ (80015e0 <LCD_Init+0x1c0>)
 8001470:	8818      	ldrh	r0, [r3, #0]
 8001472:	4b5c      	ldr	r3, [pc, #368]	@ (80015e4 <LCD_Init+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4603      	mov	r3, r0
 800147e:	485a      	ldr	r0, [pc, #360]	@ (80015e8 <LCD_Init+0x1c8>)
 8001480:	f000 fe76 	bl	8002170 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5); // If LCD is not working, try un_commenting this line with the 5ms delay
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Bias_select, Data_size, Timeout);
 8001484:	233f      	movs	r3, #63	@ 0x3f
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	b299      	uxth	r1, r3
 800148a:	4b55      	ldr	r3, [pc, #340]	@ (80015e0 <LCD_Init+0x1c0>)
 800148c:	8818      	ldrh	r0, [r3, #0]
 800148e:	4b55      	ldr	r3, [pc, #340]	@ (80015e4 <LCD_Init+0x1c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4603      	mov	r3, r0
 800149a:	4853      	ldr	r0, [pc, #332]	@ (80015e8 <LCD_Init+0x1c8>)
 800149c:	f000 fe68 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), SEG_direction, Data_size, Timeout);
 80014a0:	233f      	movs	r3, #63	@ 0x3f
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	b299      	uxth	r1, r3
 80014a6:	4b4e      	ldr	r3, [pc, #312]	@ (80015e0 <LCD_Init+0x1c0>)
 80014a8:	8818      	ldrh	r0, [r3, #0]
 80014aa:	4b4e      	ldr	r3, [pc, #312]	@ (80015e4 <LCD_Init+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	4603      	mov	r3, r0
 80014b6:	484c      	ldr	r0, [pc, #304]	@ (80015e8 <LCD_Init+0x1c8>)
 80014b8:	f000 fe5a 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), COM_direction, Data_size, Timeout);
 80014bc:	233f      	movs	r3, #63	@ 0x3f
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	b299      	uxth	r1, r3
 80014c2:	4b47      	ldr	r3, [pc, #284]	@ (80015e0 <LCD_Init+0x1c0>)
 80014c4:	8818      	ldrh	r0, [r3, #0]
 80014c6:	4b47      	ldr	r3, [pc, #284]	@ (80015e4 <LCD_Init+0x1c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f107 0220 	add.w	r2, r7, #32
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4603      	mov	r3, r0
 80014d2:	4845      	ldr	r0, [pc, #276]	@ (80015e8 <LCD_Init+0x1c8>)
 80014d4:	f000 fe4c 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Regulation_ratio, Data_size, Timeout);
 80014d8:	233f      	movs	r3, #63	@ 0x3f
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	b299      	uxth	r1, r3
 80014de:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <LCD_Init+0x1c0>)
 80014e0:	8818      	ldrh	r0, [r3, #0]
 80014e2:	4b40      	ldr	r3, [pc, #256]	@ (80015e4 <LCD_Init+0x1c4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f107 021c 	add.w	r2, r7, #28
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	4603      	mov	r3, r0
 80014ee:	483e      	ldr	r0, [pc, #248]	@ (80015e8 <LCD_Init+0x1c8>)
 80014f0:	f000 fe3e 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Set_EV_com, Data_size, Timeout);
 80014f4:	233f      	movs	r3, #63	@ 0x3f
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	b299      	uxth	r1, r3
 80014fa:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <LCD_Init+0x1c0>)
 80014fc:	8818      	ldrh	r0, [r3, #0]
 80014fe:	4b39      	ldr	r3, [pc, #228]	@ (80015e4 <LCD_Init+0x1c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f107 0218 	add.w	r2, r7, #24
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	4603      	mov	r3, r0
 800150a:	4837      	ldr	r0, [pc, #220]	@ (80015e8 <LCD_Init+0x1c8>)
 800150c:	f000 fe30 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Set_EV, Data_size, Timeout);
 8001510:	233f      	movs	r3, #63	@ 0x3f
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	b299      	uxth	r1, r3
 8001516:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <LCD_Init+0x1c0>)
 8001518:	8818      	ldrh	r0, [r3, #0]
 800151a:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <LCD_Init+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f107 0214 	add.w	r2, r7, #20
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	4603      	mov	r3, r0
 8001526:	4830      	ldr	r0, [pc, #192]	@ (80015e8 <LCD_Init+0x1c8>)
 8001528:	f000 fe22 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Booster, Data_size, Timeout);
 800152c:	233f      	movs	r3, #63	@ 0x3f
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	b299      	uxth	r1, r3
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <LCD_Init+0x1c0>)
 8001534:	8818      	ldrh	r0, [r3, #0]
 8001536:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <LCD_Init+0x1c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f107 0210 	add.w	r2, r7, #16
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4603      	mov	r3, r0
 8001542:	4829      	ldr	r0, [pc, #164]	@ (80015e8 <LCD_Init+0x1c8>)
 8001544:	f000 fe14 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Regulator, Data_size, Timeout);
 8001548:	233f      	movs	r3, #63	@ 0x3f
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	b299      	uxth	r1, r3
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <LCD_Init+0x1c0>)
 8001550:	8818      	ldrh	r0, [r3, #0]
 8001552:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <LCD_Init+0x1c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f107 020c 	add.w	r2, r7, #12
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	4603      	mov	r3, r0
 800155e:	4822      	ldr	r0, [pc, #136]	@ (80015e8 <LCD_Init+0x1c8>)
 8001560:	f000 fe06 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Follower, Data_size, Timeout);
 8001564:	233f      	movs	r3, #63	@ 0x3f
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	b299      	uxth	r1, r3
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <LCD_Init+0x1c0>)
 800156c:	8818      	ldrh	r0, [r3, #0]
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <LCD_Init+0x1c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f107 0208 	add.w	r2, r7, #8
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	4603      	mov	r3, r0
 800157a:	481b      	ldr	r0, [pc, #108]	@ (80015e8 <LCD_Init+0x1c8>)
 800157c:	f000 fdf8 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_MSB, Data_size,Timeout);
 8001580:	233f      	movs	r3, #63	@ 0x3f
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	b299      	uxth	r1, r3
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <LCD_Init+0x1c0>)
 8001588:	881a      	ldrh	r2, [r3, #0]
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <LCD_Init+0x1c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	4a16      	ldr	r2, [pc, #88]	@ (80015ec <LCD_Init+0x1cc>)
 8001594:	4814      	ldr	r0, [pc, #80]	@ (80015e8 <LCD_Init+0x1c8>)
 8001596:	f000 fdeb 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Col_addr_LSB, Data_size,Timeout);
 800159a:	233f      	movs	r3, #63	@ 0x3f
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	b299      	uxth	r1, r3
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <LCD_Init+0x1c0>)
 80015a2:	881a      	ldrh	r2, [r3, #0]
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <LCD_Init+0x1c4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	4613      	mov	r3, r2
 80015ac:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <LCD_Init+0x1d0>)
 80015ae:	480e      	ldr	r0, [pc, #56]	@ (80015e8 <LCD_Init+0x1c8>)
 80015b0:	f000 fdde 	bl	8002170 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f000 f9d9 	bl	800196c <HAL_Delay>
	clear_screen();
 80015ba:	f7ff fed9 	bl	8001370 <clear_screen>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_address << 1), Display_ON, Data_size, Timeout);
 80015be:	233f      	movs	r3, #63	@ 0x3f
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	b299      	uxth	r1, r3
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <LCD_Init+0x1c0>)
 80015c6:	8818      	ldrh	r0, [r3, #0]
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <LCD_Init+0x1c4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1d3a      	adds	r2, r7, #4
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4603      	mov	r3, r0
 80015d2:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <LCD_Init+0x1c8>)
 80015d4:	f000 fdcc 	bl	8002170 <HAL_I2C_Master_Transmit>

}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	@ 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000000a 	.word	0x2000000a
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	2000003c 	.word	0x2000003c
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000090 	.word	0x20000090

080015f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af02      	add	r7, sp, #8

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80015fa:	f000 f955 	bl	80018a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015fe:	f000 f881 	bl	8001704 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001602:	f7ff fa23 	bl	8000a4c <MX_GPIO_Init>
	MX_I2C1_Init();
 8001606:	f7ff fa5f 	bl	8000ac8 <MX_I2C1_Init>
	//************************************************************************************************************
	//************************************************************************************************************
	//
	//************************************************************************************************************
	//************************************************************************************************************
	LCD_Init();
 800160a:	f7ff ff09 	bl	8001420 <LCD_Init>
	clear_screen();
 800160e:	f7ff feaf 	bl	8001370 <clear_screen>
	multi_line_text(1,"1",0,0);
 8001612:	2300      	movs	r3, #0
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	4a2a      	ldr	r2, [pc, #168]	@ (80016c4 <main+0xd0>)
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	492a      	ldr	r1, [pc, #168]	@ (80016c8 <main+0xd4>)
 8001620:	f7ff fc82 	bl	8000f28 <multi_line_text>
	multi_line_text(2,"2",0,0);
 8001624:	2300      	movs	r3, #0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	4a28      	ldr	r2, [pc, #160]	@ (80016cc <main+0xd8>)
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001634:	f7ff fc78 	bl	8000f28 <multi_line_text>
	multi_line_text(3,"3",0,0);
 8001638:	2300      	movs	r3, #0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	4a24      	ldr	r2, [pc, #144]	@ (80016d0 <main+0xdc>)
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	4923      	ldr	r1, [pc, #140]	@ (80016d4 <main+0xe0>)
 8001646:	f7ff fc6f 	bl	8000f28 <multi_line_text>
	multi_line_text(4,"4",0,0);
 800164a:	2300      	movs	r3, #0
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2300      	movs	r3, #0
 8001650:	4a21      	ldr	r2, [pc, #132]	@ (80016d8 <main+0xe4>)
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	4921      	ldr	r1, [pc, #132]	@ (80016dc <main+0xe8>)
 8001658:	f7ff fc66 	bl	8000f28 <multi_line_text>
	multi_line_text(5,"5",0,0);
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	4a1f      	ldr	r2, [pc, #124]	@ (80016e0 <main+0xec>)
 8001664:	f04f 0000 	mov.w	r0, #0
 8001668:	491e      	ldr	r1, [pc, #120]	@ (80016e4 <main+0xf0>)
 800166a:	f7ff fc5d 	bl	8000f28 <multi_line_text>
	multi_line_text(6,"6",0,0);
 800166e:	2300      	movs	r3, #0
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	4a1c      	ldr	r2, [pc, #112]	@ (80016e8 <main+0xf4>)
 8001676:	f04f 0000 	mov.w	r0, #0
 800167a:	491c      	ldr	r1, [pc, #112]	@ (80016ec <main+0xf8>)
 800167c:	f7ff fc54 	bl	8000f28 <multi_line_text>
	multi_line_text(7,"7",0,0);
 8001680:	2300      	movs	r3, #0
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2300      	movs	r3, #0
 8001686:	4a1a      	ldr	r2, [pc, #104]	@ (80016f0 <main+0xfc>)
 8001688:	f04f 0000 	mov.w	r0, #0
 800168c:	4919      	ldr	r1, [pc, #100]	@ (80016f4 <main+0x100>)
 800168e:	f7ff fc4b 	bl	8000f28 <multi_line_text>
	multi_line_text(8,"8",0,0);
 8001692:	2300      	movs	r3, #0
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2300      	movs	r3, #0
 8001698:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <main+0x104>)
 800169a:	f04f 0000 	mov.w	r0, #0
 800169e:	4917      	ldr	r1, [pc, #92]	@ (80016fc <main+0x108>)
 80016a0:	f7ff fc42 	bl	8000f28 <multi_line_text>
	//multi_line_text(8,"abc@WXYZ123&$#",1,1);
	//draw_cuboid(24,24,5,43,1);
	//draw_horizontal_line(32,16,16);
	//draw_vertical_line(35,7,2);
	//multi_horizontal_line(131, 0, 0, 32, 2);
	Draw_Circle(63,31,30,1);
 80016a4:	2301      	movs	r3, #1
 80016a6:	221e      	movs	r2, #30
 80016a8:	211f      	movs	r1, #31
 80016aa:	203f      	movs	r0, #63	@ 0x3f
 80016ac:	f7ff fb22 	bl	8000cf4 <Draw_Circle>
	//draw_cuboid(29, 6,20, 8, 11);


	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80016b0:	2120      	movs	r1, #32
 80016b2:	4813      	ldr	r0, [pc, #76]	@ (8001700 <main+0x10c>)
 80016b4:	f000 fbfe 	bl	8001eb4 <HAL_GPIO_TogglePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2120      	movs	r1, #32
 80016bc:	4810      	ldr	r0, [pc, #64]	@ (8001700 <main+0x10c>)
 80016be:	f000 fbe1 	bl	8001e84 <HAL_GPIO_WritePin>
 80016c2:	e7f9      	b.n	80016b8 <main+0xc4>
 80016c4:	08003280 	.word	0x08003280
 80016c8:	3ff00000 	.word	0x3ff00000
 80016cc:	08003284 	.word	0x08003284
 80016d0:	08003288 	.word	0x08003288
 80016d4:	40080000 	.word	0x40080000
 80016d8:	0800328c 	.word	0x0800328c
 80016dc:	40100000 	.word	0x40100000
 80016e0:	08003290 	.word	0x08003290
 80016e4:	40140000 	.word	0x40140000
 80016e8:	08003294 	.word	0x08003294
 80016ec:	40180000 	.word	0x40180000
 80016f0:	08003298 	.word	0x08003298
 80016f4:	401c0000 	.word	0x401c0000
 80016f8:	0800329c 	.word	0x0800329c
 80016fc:	40200000 	.word	0x40200000
 8001700:	40010800 	.word	0x40010800

08001704 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b090      	sub	sp, #64	@ 0x40
 8001708:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	2228      	movs	r2, #40	@ 0x28
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fc80 	bl	8003018 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172a:	2301      	movs	r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800172e:	2310      	movs	r3, #16
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001732:	2302      	movs	r3, #2
 8001734:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001736:	2300      	movs	r3, #0
 8001738:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800173a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800173e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	4618      	mov	r0, r3
 8001746:	f001 f86b 	bl	8002820 <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x50>
		Error_Handler();
 8001750:	f000 f819 	bl	8001786 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001754:	230f      	movs	r3, #15
 8001756:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001758:	2302      	movs	r3, #2
 800175a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001764:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fad8 	bl	8002d24 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x7a>
		Error_Handler();
 800177a:	f000 f804 	bl	8001786 <Error_Handler>
	}
}
 800177e:	bf00      	nop
 8001780:	3740      	adds	r7, #64	@ 0x40
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178a:	b672      	cpsid	i
}
 800178c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800178e:	bf00      	nop
 8001790:	e7fd      	b.n	800178e <Error_Handler+0x8>
	...

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_MspInit+0x5c>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <HAL_MspInit+0x5c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6193      	str	r3, [r2, #24]
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_MspInit+0x5c>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_MspInit+0x5c>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a0e      	ldr	r2, [pc, #56]	@ (80017f0 <HAL_MspInit+0x5c>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <HAL_MspInit+0x5c>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_MspInit+0x60>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <HAL_MspInit+0x60>)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f000 f874 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800185c:	f7ff fff8 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480b      	ldr	r0, [pc, #44]	@ (8001890 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001862:	490c      	ldr	r1, [pc, #48]	@ (8001894 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001864:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a09      	ldr	r2, [pc, #36]	@ (800189c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001878:	4c09      	ldr	r4, [pc, #36]	@ (80018a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001886:	f001 fbcf 	bl	8003028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188a:	f7ff feb3 	bl	80015f4 <main>
  bx lr
 800188e:	4770      	bx	lr
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001898:	080038dc 	.word	0x080038dc
  ldr r2, =_sbss
 800189c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80018a0:	2000009c 	.word	0x2000009c

080018a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <HAL_Init+0x28>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	@ (80018d0 <HAL_Init+0x28>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f92b 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff ff66 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f935 	bl	8001b62 <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 f90b 	bl	8001b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	@ (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000014 	.word	0x20000014
 800192c:	2000001c 	.word	0x2000001c
 8001930:	20000018 	.word	0x20000018

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_IncTick+0x1c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_IncTick+0x20>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a03      	ldr	r2, [pc, #12]	@ (8001954 <HAL_IncTick+0x20>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	2000001c 	.word	0x2000001c
 8001954:	20000098 	.word	0x20000098

08001958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b02      	ldr	r3, [pc, #8]	@ (8001968 <HAL_GetTick+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	20000098 	.word	0x20000098

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fff0 	bl	8001958 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffe0 	bl	8001958 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000001c 	.word	0x2000001c

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	@ (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	@ (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	@ 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f7ff ff90 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff49 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff5e 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff90 	bl	8001a6c <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5f 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffb0 	bl	8001ad0 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b08b      	sub	sp, #44	@ 0x2c
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	e169      	b.n	8001e64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b90:	2201      	movs	r2, #1
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 8158 	bne.w	8001e5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a9a      	ldr	r2, [pc, #616]	@ (8001e1c <HAL_GPIO_Init+0x2a0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d05e      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001bb8:	4a98      	ldr	r2, [pc, #608]	@ (8001e1c <HAL_GPIO_Init+0x2a0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d875      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bbe:	4a98      	ldr	r2, [pc, #608]	@ (8001e20 <HAL_GPIO_Init+0x2a4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d058      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001bc4:	4a96      	ldr	r2, [pc, #600]	@ (8001e20 <HAL_GPIO_Init+0x2a4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d86f      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bca:	4a96      	ldr	r2, [pc, #600]	@ (8001e24 <HAL_GPIO_Init+0x2a8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d052      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001bd0:	4a94      	ldr	r2, [pc, #592]	@ (8001e24 <HAL_GPIO_Init+0x2a8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d869      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bd6:	4a94      	ldr	r2, [pc, #592]	@ (8001e28 <HAL_GPIO_Init+0x2ac>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d04c      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001bdc:	4a92      	ldr	r2, [pc, #584]	@ (8001e28 <HAL_GPIO_Init+0x2ac>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d863      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001be2:	4a92      	ldr	r2, [pc, #584]	@ (8001e2c <HAL_GPIO_Init+0x2b0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d046      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
 8001be8:	4a90      	ldr	r2, [pc, #576]	@ (8001e2c <HAL_GPIO_Init+0x2b0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d85d      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d82a      	bhi.n	8001c48 <HAL_GPIO_Init+0xcc>
 8001bf2:	2b12      	cmp	r3, #18
 8001bf4:	d859      	bhi.n	8001caa <HAL_GPIO_Init+0x12e>
 8001bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bfc <HAL_GPIO_Init+0x80>)
 8001bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfc:	08001c77 	.word	0x08001c77
 8001c00:	08001c51 	.word	0x08001c51
 8001c04:	08001c63 	.word	0x08001c63
 8001c08:	08001ca5 	.word	0x08001ca5
 8001c0c:	08001cab 	.word	0x08001cab
 8001c10:	08001cab 	.word	0x08001cab
 8001c14:	08001cab 	.word	0x08001cab
 8001c18:	08001cab 	.word	0x08001cab
 8001c1c:	08001cab 	.word	0x08001cab
 8001c20:	08001cab 	.word	0x08001cab
 8001c24:	08001cab 	.word	0x08001cab
 8001c28:	08001cab 	.word	0x08001cab
 8001c2c:	08001cab 	.word	0x08001cab
 8001c30:	08001cab 	.word	0x08001cab
 8001c34:	08001cab 	.word	0x08001cab
 8001c38:	08001cab 	.word	0x08001cab
 8001c3c:	08001cab 	.word	0x08001cab
 8001c40:	08001c59 	.word	0x08001c59
 8001c44:	08001c6d 	.word	0x08001c6d
 8001c48:	4a79      	ldr	r2, [pc, #484]	@ (8001e30 <HAL_GPIO_Init+0x2b4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c4e:	e02c      	b.n	8001caa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e029      	b.n	8001cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e024      	b.n	8001cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	3308      	adds	r3, #8
 8001c68:	623b      	str	r3, [r7, #32]
          break;
 8001c6a:	e01f      	b.n	8001cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	330c      	adds	r3, #12
 8001c72:	623b      	str	r3, [r7, #32]
          break;
 8001c74:	e01a      	b.n	8001cac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e013      	b.n	8001cac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	611a      	str	r2, [r3, #16]
          break;
 8001c96:	e009      	b.n	8001cac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	615a      	str	r2, [r3, #20]
          break;
 8001ca2:	e003      	b.n	8001cac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
          break;
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x130>
          break;
 8001caa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2bff      	cmp	r3, #255	@ 0xff
 8001cb0:	d801      	bhi.n	8001cb6 <HAL_GPIO_Init+0x13a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	e001      	b.n	8001cba <HAL_GPIO_Init+0x13e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2bff      	cmp	r3, #255	@ 0xff
 8001cc0:	d802      	bhi.n	8001cc8 <HAL_GPIO_Init+0x14c>
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	e002      	b.n	8001cce <HAL_GPIO_Init+0x152>
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	3b08      	subs	r3, #8
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	210f      	movs	r1, #15
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	401a      	ands	r2, r3
 8001ce0:	6a39      	ldr	r1, [r7, #32]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80b1 	beq.w	8001e5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e34 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a4c      	ldr	r2, [pc, #304]	@ (8001e34 <HAL_GPIO_Init+0x2b8>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <HAL_GPIO_Init+0x2b8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d14:	4a48      	ldr	r2, [pc, #288]	@ (8001e38 <HAL_GPIO_Init+0x2bc>)
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a40      	ldr	r2, [pc, #256]	@ (8001e3c <HAL_GPIO_Init+0x2c0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d013      	beq.n	8001d68 <HAL_GPIO_Init+0x1ec>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3f      	ldr	r2, [pc, #252]	@ (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00d      	beq.n	8001d64 <HAL_GPIO_Init+0x1e8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d007      	beq.n	8001d60 <HAL_GPIO_Init+0x1e4>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3d      	ldr	r2, [pc, #244]	@ (8001e48 <HAL_GPIO_Init+0x2cc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_GPIO_Init+0x1e0>
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e006      	b.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	e004      	b.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	4093      	lsls	r3, r2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d7a:	492f      	ldr	r1, [pc, #188]	@ (8001e38 <HAL_GPIO_Init+0x2bc>)
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d94:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	492c      	ldr	r1, [pc, #176]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001da2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4928      	ldr	r1, [pc, #160]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dbc:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	4922      	ldr	r1, [pc, #136]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60cb      	str	r3, [r1, #12]
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	491e      	ldr	r1, [pc, #120]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4918      	ldr	r1, [pc, #96]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001df2:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4914      	ldr	r1, [pc, #80]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d021      	beq.n	8001e50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	490e      	ldr	r1, [pc, #56]	@ (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e021      	b.n	8001e5e <HAL_GPIO_Init+0x2e2>
 8001e1a:	bf00      	nop
 8001e1c:	10320000 	.word	0x10320000
 8001e20:	10310000 	.word	0x10310000
 8001e24:	10220000 	.word	0x10220000
 8001e28:	10210000 	.word	0x10210000
 8001e2c:	10120000 	.word	0x10120000
 8001e30:	10110000 	.word	0x10110000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	40010c00 	.word	0x40010c00
 8001e44:	40011000 	.word	0x40011000
 8001e48:	40011400 	.word	0x40011400
 8001e4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_GPIO_Init+0x304>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	4909      	ldr	r1, [pc, #36]	@ (8001e80 <HAL_GPIO_Init+0x304>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	3301      	adds	r3, #1
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f47f ae8e 	bne.w	8001b90 <HAL_GPIO_Init+0x14>
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	372c      	adds	r7, #44	@ 0x2c
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ea0:	e003      	b.n	8001eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	611a      	str	r2, [r3, #16]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43d9      	mvns	r1, r3
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	611a      	str	r2, [r3, #16]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
	...

08001ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e12b      	b.n	8002152 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fe08 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2224      	movs	r2, #36	@ 0x24
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f4c:	f001 f832 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8001f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a81      	ldr	r2, [pc, #516]	@ (800215c <HAL_I2C_Init+0x274>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d807      	bhi.n	8001f6c <HAL_I2C_Init+0x84>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4a80      	ldr	r2, [pc, #512]	@ (8002160 <HAL_I2C_Init+0x278>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	bf94      	ite	ls
 8001f64:	2301      	movls	r3, #1
 8001f66:	2300      	movhi	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e006      	b.n	8001f7a <HAL_I2C_Init+0x92>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a7d      	ldr	r2, [pc, #500]	@ (8002164 <HAL_I2C_Init+0x27c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	bf94      	ite	ls
 8001f74:	2301      	movls	r3, #1
 8001f76:	2300      	movhi	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0e7      	b.n	8002152 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a78      	ldr	r2, [pc, #480]	@ (8002168 <HAL_I2C_Init+0x280>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0c9b      	lsrs	r3, r3, #18
 8001f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a6a      	ldr	r2, [pc, #424]	@ (800215c <HAL_I2C_Init+0x274>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d802      	bhi.n	8001fbc <HAL_I2C_Init+0xd4>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	e009      	b.n	8001fd0 <HAL_I2C_Init+0xe8>
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	4a69      	ldr	r2, [pc, #420]	@ (800216c <HAL_I2C_Init+0x284>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	099b      	lsrs	r3, r3, #6
 8001fce:	3301      	adds	r3, #1
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fe2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	495c      	ldr	r1, [pc, #368]	@ (800215c <HAL_I2C_Init+0x274>)
 8001fec:	428b      	cmp	r3, r1
 8001fee:	d819      	bhi.n	8002024 <HAL_I2C_Init+0x13c>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1e59      	subs	r1, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ffe:	1c59      	adds	r1, r3, #1
 8002000:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002004:	400b      	ands	r3, r1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_I2C_Init+0x138>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1e59      	subs	r1, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fbb1 f3f3 	udiv	r3, r1, r3
 8002018:	3301      	adds	r3, #1
 800201a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201e:	e051      	b.n	80020c4 <HAL_I2C_Init+0x1dc>
 8002020:	2304      	movs	r3, #4
 8002022:	e04f      	b.n	80020c4 <HAL_I2C_Init+0x1dc>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d111      	bne.n	8002050 <HAL_I2C_Init+0x168>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e58      	subs	r0, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	440b      	add	r3, r1
 800203a:	fbb0 f3f3 	udiv	r3, r0, r3
 800203e:	3301      	adds	r3, #1
 8002040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	e012      	b.n	8002076 <HAL_I2C_Init+0x18e>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	0099      	lsls	r1, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	fbb0 f3f3 	udiv	r3, r0, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_Init+0x196>
 800207a:	2301      	movs	r3, #1
 800207c:	e022      	b.n	80020c4 <HAL_I2C_Init+0x1dc>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10e      	bne.n	80020a4 <HAL_I2C_Init+0x1bc>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1e58      	subs	r0, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6859      	ldr	r1, [r3, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	440b      	add	r3, r1
 8002094:	fbb0 f3f3 	udiv	r3, r0, r3
 8002098:	3301      	adds	r3, #1
 800209a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020a2:	e00f      	b.n	80020c4 <HAL_I2C_Init+0x1dc>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1e58      	subs	r0, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	0099      	lsls	r1, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	6809      	ldr	r1, [r1, #0]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6911      	ldr	r1, [r2, #16]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68d2      	ldr	r2, [r2, #12]
 80020fe:	4311      	orrs	r1, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	430b      	orrs	r3, r1
 8002106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	000186a0 	.word	0x000186a0
 8002160:	001e847f 	.word	0x001e847f
 8002164:	003d08ff 	.word	0x003d08ff
 8002168:	431bde83 	.word	0x431bde83
 800216c:	10624dd3 	.word	0x10624dd3

08002170 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	461a      	mov	r2, r3
 800217c:	460b      	mov	r3, r1
 800217e:	817b      	strh	r3, [r7, #10]
 8002180:	4613      	mov	r3, r2
 8002182:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff fbe8 	bl	8001958 <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b20      	cmp	r3, #32
 8002194:	f040 80e0 	bne.w	8002358 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2319      	movs	r3, #25
 800219e:	2201      	movs	r2, #1
 80021a0:	4970      	ldr	r1, [pc, #448]	@ (8002364 <HAL_I2C_Master_Transmit+0x1f4>)
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f964 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
 80021b0:	e0d3      	b.n	800235a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_I2C_Master_Transmit+0x50>
 80021bc:	2302      	movs	r3, #2
 80021be:	e0cc      	b.n	800235a <HAL_I2C_Master_Transmit+0x1ea>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d007      	beq.n	80021e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2221      	movs	r2, #33	@ 0x21
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2210      	movs	r2, #16
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	893a      	ldrh	r2, [r7, #8]
 8002216:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a50      	ldr	r2, [pc, #320]	@ (8002368 <HAL_I2C_Master_Transmit+0x1f8>)
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002228:	8979      	ldrh	r1, [r7, #10]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	6a3a      	ldr	r2, [r7, #32]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f89c 	bl	800236c <I2C_MasterRequestWrite>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e08d      	b.n	800235a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002254:	e066      	b.n	8002324 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	6a39      	ldr	r1, [r7, #32]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fa22 	bl	80026a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	2b04      	cmp	r3, #4
 800226c:	d107      	bne.n	800227e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06b      	b.n	800235a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d11b      	bne.n	80022f8 <HAL_I2C_Master_Transmit+0x188>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d017      	beq.n	80022f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	6a39      	ldr	r1, [r7, #32]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fa19 	bl	8002734 <I2C_WaitOnBTFFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00d      	beq.n	8002324 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	2b04      	cmp	r3, #4
 800230e:	d107      	bne.n	8002320 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e01a      	b.n	800235a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	d194      	bne.n	8002256 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	e000      	b.n	800235a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002358:	2302      	movs	r3, #2
  }
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	00100002 	.word	0x00100002
 8002368:	ffff0000 	.word	0xffff0000

0800236c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	460b      	mov	r3, r1
 800237a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002380:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d006      	beq.n	8002396 <I2C_MasterRequestWrite+0x2a>
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d003      	beq.n	8002396 <I2C_MasterRequestWrite+0x2a>
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002394:	d108      	bne.n	80023a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e00b      	b.n	80023c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	2b12      	cmp	r3, #18
 80023ae:	d107      	bne.n	80023c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f84f 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023e6:	d103      	bne.n	80023f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e035      	b.n	8002460 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023fc:	d108      	bne.n	8002410 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023fe:	897b      	ldrh	r3, [r7, #10]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800240c:	611a      	str	r2, [r3, #16]
 800240e:	e01b      	b.n	8002448 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002410:	897b      	ldrh	r3, [r7, #10]
 8002412:	11db      	asrs	r3, r3, #7
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f003 0306 	and.w	r3, r3, #6
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f063 030f 	orn	r3, r3, #15
 8002420:	b2da      	uxtb	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	490e      	ldr	r1, [pc, #56]	@ (8002468 <I2C_MasterRequestWrite+0xfc>)
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f898 	bl	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e010      	b.n	8002460 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800243e:	897b      	ldrh	r3, [r7, #10]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4907      	ldr	r1, [pc, #28]	@ (800246c <I2C_MasterRequestWrite+0x100>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f888 	bl	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	00010008 	.word	0x00010008
 800246c:	00010002 	.word	0x00010002

08002470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002480:	e048      	b.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d044      	beq.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7ff fa65 	bl	8001958 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d139      	bne.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d10d      	bne.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	43da      	mvns	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4013      	ands	r3, r2
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	e00c      	b.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	43da      	mvns	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4013      	ands	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d116      	bne.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	f043 0220 	orr.w	r2, r3, #32
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e023      	b.n	800255c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10d      	bne.n	800253a <I2C_WaitOnFlagUntilTimeout+0xca>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	43da      	mvns	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	e00c      	b.n	8002554 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	43da      	mvns	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	429a      	cmp	r2, r3
 8002558:	d093      	beq.n	8002482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002572:	e071      	b.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002582:	d123      	bne.n	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002592:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800259c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e067      	b.n	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d041      	beq.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d4:	f7ff f9c0 	bl	8001958 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d302      	bcc.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d136      	bne.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10c      	bne.n	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4013      	ands	r3, r2
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	e00b      	b.n	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	43da      	mvns	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4013      	ands	r3, r2
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
 8002622:	2300      	moveq	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e021      	b.n	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	0c1b      	lsrs	r3, r3, #16
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10c      	bne.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	43da      	mvns	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4013      	ands	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e00b      	b.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4013      	ands	r3, r2
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f af6d 	bne.w	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b0:	e034      	b.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f886 	bl	80027c4 <I2C_IsAcknowledgeFailed>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e034      	b.n	800272c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d028      	beq.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7ff f945 	bl	8001958 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11d      	bne.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ea:	2b80      	cmp	r3, #128	@ 0x80
 80026ec:	d016      	beq.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e007      	b.n	800272c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002726:	2b80      	cmp	r3, #128	@ 0x80
 8002728:	d1c3      	bne.n	80026b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002740:	e034      	b.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f83e 	bl	80027c4 <I2C_IsAcknowledgeFailed>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e034      	b.n	80027bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d028      	beq.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7ff f8fd 	bl	8001958 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11d      	bne.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d016      	beq.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f043 0220 	orr.w	r2, r3, #32
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e007      	b.n	80027bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d1c3      	bne.n	8002742 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027da:	d11b      	bne.n	8002814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f043 0204 	orr.w	r2, r3, #4
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e272      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8087 	beq.w	800294e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002840:	4b92      	ldr	r3, [pc, #584]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b04      	cmp	r3, #4
 800284a:	d00c      	beq.n	8002866 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800284c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d112      	bne.n	800287e <HAL_RCC_OscConfig+0x5e>
 8002858:	4b8c      	ldr	r3, [pc, #560]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002864:	d10b      	bne.n	800287e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002866:	4b89      	ldr	r3, [pc, #548]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d06c      	beq.n	800294c <HAL_RCC_OscConfig+0x12c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d168      	bne.n	800294c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e24c      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x76>
 8002888:	4b80      	ldr	r3, [pc, #512]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e02e      	b.n	80028f4 <HAL_RCC_OscConfig+0xd4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x98>
 800289e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a7a      	ldr	r2, [pc, #488]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b78      	ldr	r3, [pc, #480]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a77      	ldr	r2, [pc, #476]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e01d      	b.n	80028f4 <HAL_RCC_OscConfig+0xd4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0xbc>
 80028c2:	4b72      	ldr	r3, [pc, #456]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a71      	ldr	r2, [pc, #452]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0xd4>
 80028dc:	4b6b      	ldr	r3, [pc, #428]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a67      	ldr	r2, [pc, #412]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7ff f82c 	bl	8001958 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7ff f828 	bl	8001958 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e200      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b5d      	ldr	r3, [pc, #372]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0xe4>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7ff f818 	bl	8001958 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7ff f814 	bl	8001958 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	@ 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1ec      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x10c>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d063      	beq.n	8002a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800295a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002966:	4b49      	ldr	r3, [pc, #292]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d11c      	bne.n	80029ac <HAL_RCC_OscConfig+0x18c>
 8002972:	4b46      	ldr	r3, [pc, #280]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d116      	bne.n	80029ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297e:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x176>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e1c0      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b3d      	ldr	r3, [pc, #244]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4939      	ldr	r1, [pc, #228]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029aa:	e03a      	b.n	8002a22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b4:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <HAL_RCC_OscConfig+0x270>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe ffcd 	bl	8001958 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c2:	f7fe ffc9 	bl	8001958 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1a1      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4927      	ldr	r1, [pc, #156]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
 80029f4:	e015      	b.n	8002a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <HAL_RCC_OscConfig+0x270>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe ffac 	bl	8001958 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe ffa8 	bl	8001958 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e180      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d03a      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d019      	beq.n	8002a6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a36:	4b17      	ldr	r3, [pc, #92]	@ (8002a94 <HAL_RCC_OscConfig+0x274>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe ff8c 	bl	8001958 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fe ff88 	bl	8001958 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e160      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a62:	2001      	movs	r0, #1
 8002a64:	f000 faba 	bl	8002fdc <RCC_Delay>
 8002a68:	e01c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7fe ff72 	bl	8001958 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a76:	e00f      	b.n	8002a98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a78:	f7fe ff6e 	bl	8001958 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d908      	bls.n	8002a98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e146      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	42420000 	.word	0x42420000
 8002a94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a98:	4b92      	ldr	r3, [pc, #584]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e9      	bne.n	8002a78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a6 	beq.w	8002bfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b88      	ldr	r3, [pc, #544]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	4a87      	ldr	r2, [pc, #540]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	61d3      	str	r3, [r2, #28]
 8002ace:	4b85      	ldr	r3, [pc, #532]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b82      	ldr	r3, [pc, #520]	@ (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7fe ff2f 	bl	8001958 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7fe ff2b 	bl	8001958 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b64      	cmp	r3, #100	@ 0x64
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e103      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b75      	ldr	r3, [pc, #468]	@ (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x312>
 8002b24:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	e02d      	b.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x334>
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a69      	ldr	r2, [pc, #420]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6213      	str	r3, [r2, #32]
 8002b46:	4b67      	ldr	r3, [pc, #412]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4a66      	ldr	r2, [pc, #408]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	6213      	str	r3, [r2, #32]
 8002b52:	e01c      	b.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCC_OscConfig+0x356>
 8002b5c:	4b61      	ldr	r3, [pc, #388]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a60      	ldr	r2, [pc, #384]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	4b5e      	ldr	r3, [pc, #376]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	e00b      	b.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002b76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6213      	str	r3, [r2, #32]
 8002b82:	4b58      	ldr	r3, [pc, #352]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a57      	ldr	r2, [pc, #348]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d015      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fedf 	bl	8001958 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7fe fedb 	bl	8001958 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0b1      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ee      	beq.n	8002b9e <HAL_RCC_OscConfig+0x37e>
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fec9 	bl	8001958 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7fe fec5 	bl	8001958 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e09b      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	4b40      	ldr	r3, [pc, #256]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ee      	bne.n	8002bca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8087 	beq.w	8002d16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c08:	4b36      	ldr	r3, [pc, #216]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d061      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d146      	bne.n	8002caa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1c:	4b33      	ldr	r3, [pc, #204]	@ (8002cec <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fe99 	bl	8001958 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe fe95 	bl	8001958 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e06d      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c50:	d108      	bne.n	8002c64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c52:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	4921      	ldr	r1, [pc, #132]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a19      	ldr	r1, [r3, #32]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	430b      	orrs	r3, r1
 8002c76:	491b      	ldr	r1, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fe fe69 	bl	8001958 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe fe65 	bl	8001958 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e03d      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x46a>
 8002ca8:	e035      	b.n	8002d16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <HAL_RCC_OscConfig+0x4cc>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fe52 	bl	8001958 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe fe4e 	bl	8001958 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e026      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x498>
 8002cd6:	e01e      	b.n	8002d16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e019      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_RCC_OscConfig+0x500>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0d0      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d910      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b67      	ldr	r3, [pc, #412]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	4965      	ldr	r1, [pc, #404]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a58      	ldr	r2, [pc, #352]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d040      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d115      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de2:	4b41      	ldr	r3, [pc, #260]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e073      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06b      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e02:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4936      	ldr	r1, [pc, #216]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e14:	f7fe fda0 	bl	8001958 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f7fe fd9c 	bl	8001958 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e053      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 020c 	and.w	r2, r3, #12
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1eb      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b27      	ldr	r3, [pc, #156]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d210      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4922      	ldr	r1, [pc, #136]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	@ (8002eec <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fcfe 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	080038a0 	.word	0x080038a0
 8002ef0:	20000014 	.word	0x20000014
 8002ef4:	20000018 	.word	0x20000018

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f12:	4b1e      	ldr	r3, [pc, #120]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d002      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x30>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x36>
 8002f26:	e027      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f2a:	613b      	str	r3, [r7, #16]
      break;
 8002f2c:	e027      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	0c9b      	lsrs	r3, r3, #18
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f46:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0c5b      	lsrs	r3, r3, #17
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f5a:	fb03 f202 	mul.w	r2, r3, r2
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e004      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	613b      	str	r3, [r7, #16]
      break;
 8002f76:	e002      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f7a:	613b      	str	r3, [r7, #16]
      break;
 8002f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7e:	693b      	ldr	r3, [r7, #16]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	007a1200 	.word	0x007a1200
 8002f94:	080038b8 	.word	0x080038b8
 8002f98:	080038c8 	.word	0x080038c8
 8002f9c:	003d0900 	.word	0x003d0900

08002fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa4:	4b02      	ldr	r3, [pc, #8]	@ (8002fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	20000014 	.word	0x20000014

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb8:	f7ff fff2 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	080038b0 	.word	0x080038b0

08002fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <RCC_Delay+0x34>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <RCC_Delay+0x38>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0a5b      	lsrs	r3, r3, #9
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ff8:	bf00      	nop
  }
  while (Delay --);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	60fa      	str	r2, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f9      	bne.n	8002ff8 <RCC_Delay+0x1c>
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	20000014 	.word	0x20000014
 8003014:	10624dd3 	.word	0x10624dd3

08003018 <memset>:
 8003018:	4603      	mov	r3, r0
 800301a:	4402      	add	r2, r0
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	f803 1b01 	strb.w	r1, [r3], #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <__libc_init_array>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	2600      	movs	r6, #0
 800302c:	4d0c      	ldr	r5, [pc, #48]	@ (8003060 <__libc_init_array+0x38>)
 800302e:	4c0d      	ldr	r4, [pc, #52]	@ (8003064 <__libc_init_array+0x3c>)
 8003030:	1b64      	subs	r4, r4, r5
 8003032:	10a4      	asrs	r4, r4, #2
 8003034:	42a6      	cmp	r6, r4
 8003036:	d109      	bne.n	800304c <__libc_init_array+0x24>
 8003038:	f000 f916 	bl	8003268 <_init>
 800303c:	2600      	movs	r6, #0
 800303e:	4d0a      	ldr	r5, [pc, #40]	@ (8003068 <__libc_init_array+0x40>)
 8003040:	4c0a      	ldr	r4, [pc, #40]	@ (800306c <__libc_init_array+0x44>)
 8003042:	1b64      	subs	r4, r4, r5
 8003044:	10a4      	asrs	r4, r4, #2
 8003046:	42a6      	cmp	r6, r4
 8003048:	d105      	bne.n	8003056 <__libc_init_array+0x2e>
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003050:	4798      	blx	r3
 8003052:	3601      	adds	r6, #1
 8003054:	e7ee      	b.n	8003034 <__libc_init_array+0xc>
 8003056:	f855 3b04 	ldr.w	r3, [r5], #4
 800305a:	4798      	blx	r3
 800305c:	3601      	adds	r6, #1
 800305e:	e7f2      	b.n	8003046 <__libc_init_array+0x1e>
 8003060:	080038d4 	.word	0x080038d4
 8003064:	080038d4 	.word	0x080038d4
 8003068:	080038d4 	.word	0x080038d4
 800306c:	080038d8 	.word	0x080038d8

08003070 <ceil>:
 8003070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003074:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003078:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800307c:	2e13      	cmp	r6, #19
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	460c      	mov	r4, r1
 8003084:	4605      	mov	r5, r0
 8003086:	4680      	mov	r8, r0
 8003088:	dc2f      	bgt.n	80030ea <ceil+0x7a>
 800308a:	2e00      	cmp	r6, #0
 800308c:	da11      	bge.n	80030b2 <ceil+0x42>
 800308e:	a332      	add	r3, pc, #200	@ (adr r3, 8003158 <ceil+0xe8>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd f86a 	bl	800016c <__adddf3>
 8003098:	2200      	movs	r2, #0
 800309a:	2300      	movs	r3, #0
 800309c:	f7fd fcac 	bl	80009f8 <__aeabi_dcmpgt>
 80030a0:	b120      	cbz	r0, 80030ac <ceil+0x3c>
 80030a2:	2c00      	cmp	r4, #0
 80030a4:	db51      	blt.n	800314a <ceil+0xda>
 80030a6:	4325      	orrs	r5, r4
 80030a8:	d153      	bne.n	8003152 <ceil+0xe2>
 80030aa:	462c      	mov	r4, r5
 80030ac:	4623      	mov	r3, r4
 80030ae:	462a      	mov	r2, r5
 80030b0:	e024      	b.n	80030fc <ceil+0x8c>
 80030b2:	4f2b      	ldr	r7, [pc, #172]	@ (8003160 <ceil+0xf0>)
 80030b4:	4137      	asrs	r7, r6
 80030b6:	ea01 0c07 	and.w	ip, r1, r7
 80030ba:	ea5c 0c00 	orrs.w	ip, ip, r0
 80030be:	d01d      	beq.n	80030fc <ceil+0x8c>
 80030c0:	a325      	add	r3, pc, #148	@ (adr r3, 8003158 <ceil+0xe8>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	f7fd f851 	bl	800016c <__adddf3>
 80030ca:	2200      	movs	r2, #0
 80030cc:	2300      	movs	r3, #0
 80030ce:	f7fd fc93 	bl	80009f8 <__aeabi_dcmpgt>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d0ea      	beq.n	80030ac <ceil+0x3c>
 80030d6:	2c00      	cmp	r4, #0
 80030d8:	bfc2      	ittt	gt
 80030da:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80030de:	4133      	asrgt	r3, r6
 80030e0:	18e4      	addgt	r4, r4, r3
 80030e2:	2500      	movs	r5, #0
 80030e4:	ea24 0407 	bic.w	r4, r4, r7
 80030e8:	e7e0      	b.n	80030ac <ceil+0x3c>
 80030ea:	2e33      	cmp	r6, #51	@ 0x33
 80030ec:	dd0a      	ble.n	8003104 <ceil+0x94>
 80030ee:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80030f2:	d103      	bne.n	80030fc <ceil+0x8c>
 80030f4:	f7fd f83a 	bl	800016c <__adddf3>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003104:	f04f 3cff 	mov.w	ip, #4294967295
 8003108:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800310c:	fa2c f707 	lsr.w	r7, ip, r7
 8003110:	4238      	tst	r0, r7
 8003112:	d0f3      	beq.n	80030fc <ceil+0x8c>
 8003114:	a310      	add	r3, pc, #64	@ (adr r3, 8003158 <ceil+0xe8>)
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f7fd f827 	bl	800016c <__adddf3>
 800311e:	2200      	movs	r2, #0
 8003120:	2300      	movs	r3, #0
 8003122:	f7fd fc69 	bl	80009f8 <__aeabi_dcmpgt>
 8003126:	2800      	cmp	r0, #0
 8003128:	d0c0      	beq.n	80030ac <ceil+0x3c>
 800312a:	2c00      	cmp	r4, #0
 800312c:	dd0a      	ble.n	8003144 <ceil+0xd4>
 800312e:	2e14      	cmp	r6, #20
 8003130:	d101      	bne.n	8003136 <ceil+0xc6>
 8003132:	3401      	adds	r4, #1
 8003134:	e006      	b.n	8003144 <ceil+0xd4>
 8003136:	2301      	movs	r3, #1
 8003138:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800313c:	40b3      	lsls	r3, r6
 800313e:	441d      	add	r5, r3
 8003140:	45a8      	cmp	r8, r5
 8003142:	d8f6      	bhi.n	8003132 <ceil+0xc2>
 8003144:	ea25 0507 	bic.w	r5, r5, r7
 8003148:	e7b0      	b.n	80030ac <ceil+0x3c>
 800314a:	2500      	movs	r5, #0
 800314c:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8003150:	e7ac      	b.n	80030ac <ceil+0x3c>
 8003152:	2500      	movs	r5, #0
 8003154:	4c03      	ldr	r4, [pc, #12]	@ (8003164 <ceil+0xf4>)
 8003156:	e7a9      	b.n	80030ac <ceil+0x3c>
 8003158:	8800759c 	.word	0x8800759c
 800315c:	7e37e43c 	.word	0x7e37e43c
 8003160:	000fffff 	.word	0x000fffff
 8003164:	3ff00000 	.word	0x3ff00000

08003168 <floor>:
 8003168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800316c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003170:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8003174:	2e13      	cmp	r6, #19
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	460c      	mov	r4, r1
 800317c:	4605      	mov	r5, r0
 800317e:	4680      	mov	r8, r0
 8003180:	dc35      	bgt.n	80031ee <floor+0x86>
 8003182:	2e00      	cmp	r6, #0
 8003184:	da17      	bge.n	80031b6 <floor+0x4e>
 8003186:	a334      	add	r3, pc, #208	@ (adr r3, 8003258 <floor+0xf0>)
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f7fc ffee 	bl	800016c <__adddf3>
 8003190:	2200      	movs	r2, #0
 8003192:	2300      	movs	r3, #0
 8003194:	f7fd fc30 	bl	80009f8 <__aeabi_dcmpgt>
 8003198:	b150      	cbz	r0, 80031b0 <floor+0x48>
 800319a:	2c00      	cmp	r4, #0
 800319c:	da57      	bge.n	800324e <floor+0xe6>
 800319e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80031a2:	432c      	orrs	r4, r5
 80031a4:	2500      	movs	r5, #0
 80031a6:	42ac      	cmp	r4, r5
 80031a8:	4c2d      	ldr	r4, [pc, #180]	@ (8003260 <floor+0xf8>)
 80031aa:	bf08      	it	eq
 80031ac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80031b0:	4623      	mov	r3, r4
 80031b2:	462a      	mov	r2, r5
 80031b4:	e024      	b.n	8003200 <floor+0x98>
 80031b6:	4f2b      	ldr	r7, [pc, #172]	@ (8003264 <floor+0xfc>)
 80031b8:	4137      	asrs	r7, r6
 80031ba:	ea01 0c07 	and.w	ip, r1, r7
 80031be:	ea5c 0c00 	orrs.w	ip, ip, r0
 80031c2:	d01d      	beq.n	8003200 <floor+0x98>
 80031c4:	a324      	add	r3, pc, #144	@ (adr r3, 8003258 <floor+0xf0>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fc ffcf 	bl	800016c <__adddf3>
 80031ce:	2200      	movs	r2, #0
 80031d0:	2300      	movs	r3, #0
 80031d2:	f7fd fc11 	bl	80009f8 <__aeabi_dcmpgt>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d0ea      	beq.n	80031b0 <floor+0x48>
 80031da:	2c00      	cmp	r4, #0
 80031dc:	bfbe      	ittt	lt
 80031de:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80031e2:	4133      	asrlt	r3, r6
 80031e4:	18e4      	addlt	r4, r4, r3
 80031e6:	2500      	movs	r5, #0
 80031e8:	ea24 0407 	bic.w	r4, r4, r7
 80031ec:	e7e0      	b.n	80031b0 <floor+0x48>
 80031ee:	2e33      	cmp	r6, #51	@ 0x33
 80031f0:	dd0a      	ble.n	8003208 <floor+0xa0>
 80031f2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80031f6:	d103      	bne.n	8003200 <floor+0x98>
 80031f8:	f7fc ffb8 	bl	800016c <__adddf3>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003208:	f04f 3cff 	mov.w	ip, #4294967295
 800320c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8003210:	fa2c f707 	lsr.w	r7, ip, r7
 8003214:	4207      	tst	r7, r0
 8003216:	d0f3      	beq.n	8003200 <floor+0x98>
 8003218:	a30f      	add	r3, pc, #60	@ (adr r3, 8003258 <floor+0xf0>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f7fc ffa5 	bl	800016c <__adddf3>
 8003222:	2200      	movs	r2, #0
 8003224:	2300      	movs	r3, #0
 8003226:	f7fd fbe7 	bl	80009f8 <__aeabi_dcmpgt>
 800322a:	2800      	cmp	r0, #0
 800322c:	d0c0      	beq.n	80031b0 <floor+0x48>
 800322e:	2c00      	cmp	r4, #0
 8003230:	da0a      	bge.n	8003248 <floor+0xe0>
 8003232:	2e14      	cmp	r6, #20
 8003234:	d101      	bne.n	800323a <floor+0xd2>
 8003236:	3401      	adds	r4, #1
 8003238:	e006      	b.n	8003248 <floor+0xe0>
 800323a:	2301      	movs	r3, #1
 800323c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003240:	40b3      	lsls	r3, r6
 8003242:	441d      	add	r5, r3
 8003244:	4545      	cmp	r5, r8
 8003246:	d3f6      	bcc.n	8003236 <floor+0xce>
 8003248:	ea25 0507 	bic.w	r5, r5, r7
 800324c:	e7b0      	b.n	80031b0 <floor+0x48>
 800324e:	2500      	movs	r5, #0
 8003250:	462c      	mov	r4, r5
 8003252:	e7ad      	b.n	80031b0 <floor+0x48>
 8003254:	f3af 8000 	nop.w
 8003258:	8800759c 	.word	0x8800759c
 800325c:	7e37e43c 	.word	0x7e37e43c
 8003260:	bff00000 	.word	0xbff00000
 8003264:	000fffff 	.word	0x000fffff

08003268 <_init>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr

08003274 <_fini>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	bf00      	nop
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr
